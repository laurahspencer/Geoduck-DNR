plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1,3), ylim=c(-0.5,0.5), asp=NA, main= "NMDS of SRM data for technical rep QA")
text(SRM.nmds.samples.sorted[c("G001-A", "G001-B"),], labels=c("1A", "1B"), col=colors[1])
text(SRM.nmds.samples.sorted[c("G002-A", "G002-B", "G002-C"),], labels=c("2A", "2B", "2C"), col=colors[2])
text(SRM.nmds.samples.sorted[c("G003-A", "G003-B", "G003-C"),], labels=c("3A", "3B", "3C"), col=colors[3]) #G003-C is very different
text(SRM.nmds.samples.sorted[c("G007-A", "G007-B"),], labels=c("7A", "7B"), col=colors[4])
text(SRM.nmds.samples.sorted[c("G008-A", "G008-B"),], labels=c("8A", "8B"), col=colors[5])
text(SRM.nmds.samples.sorted[c("G009-A", "G009-B"),], labels=c("9A", "9B"), col=colors[6])
text(SRM.nmds.samples.sorted[c("G012-A", "G012-B", "G012-C"),], labels=c("12A", "12B", "12C"), col=colors[7])
text(SRM.nmds.samples.sorted[c("G013-A", "G013-C"),], labels=c("13A", "13B"), col=colors[8])
text(SRM.nmds.samples.sorted[c("G014-A", "G014-B"),], labels=c("14A", "14B"), col=colors[9])
text(SRM.nmds.samples.sorted[c("G015-A", "G015-B"),], labels=c("15A", "15B"), col=colors[10])
text(SRM.nmds.samples.sorted[c("G016-A", "G016-B", "G016-C"),], labels=c("16A", "16B", "16C"), col=colors[11]) # not perfect
text(SRM.nmds.samples.sorted[c("G017-A", "G017-B"),], labels=c("17A", "17B"), col=colors[12]) # not great
text(SRM.nmds.samples.sorted[c("G031-A", "G031-B", "G031-C"),], labels=c("31A", "31B", "31C"), col=colors[13]) #31- not great
text(SRM.nmds.samples.sorted[c("G032-A", "G032-B"),], labels=c("32A", "32B"), col=colors[14])
text(SRM.nmds.samples.sorted[c("G040-A", "G040-B"),], labels=c("40A", "40B"), col=colors[15])
text(SRM.nmds.samples.sorted[c("G041-A", "G041-B"),], labels=c("41A", "41B"), col=colors[16])
text(SRM.nmds.samples.sorted[c("G042-A", "G042-B", "G042-C"),], labels=c("42A", "42B", "42C"), col=colors[17]) #G042-C very off
text(SRM.nmds.samples.sorted[c("G043-A", "G043-B"),], labels=c("43A", "43B"), col=colors[18])
text(SRM.nmds.samples.sorted[c("G045-A", "G045-B"),], labels=c("45A", "45B"), col=colors[19])
text(SRM.nmds.samples.sorted[c("G047-A", "G047-B"),], labels=c("47A", "47B"), col=colors[20])
text(SRM.nmds.samples.sorted[c("G049-A", "G049-B"),], labels=c("49A", "49B"), col=colors[21])
text(SRM.nmds.samples.sorted[c("G053-A", "G053-B", "G053-remake-C", "G053-remake-D"),], labels=c("53A", "53B", "53C-redo", "53D-redo"), col=colors[22]) #53-B bad
text(SRM.nmds.samples.sorted[c("G054-A", "G054-B"),], labels=c("54A", "54B"), col=colors[23])
text(SRM.nmds.samples.sorted[c("G055-A", "G055-B"),], labels=c("55A", "55B"), col=colors[24]) #one is very off
text(SRM.nmds.samples.sorted[c("G057-A", "G057-B", "G057-C"),], labels=c("57A", "57B", "57C"), col=colors[25]) #57-B BAD
text(SRM.nmds.samples.sorted[c("G060-A", "G060-B"),], labels=c("60A", "60B"), col=colors[26])
text(SRM.nmds.samples.sorted[c("G062-B", "G062-C"),], labels=c("62B", "62C"), col=colors[27])
text(SRM.nmds.samples.sorted[c("G064-A", "G064-B"),], labels=c("64A", "64B"), col=colors[28])
text(SRM.nmds.samples.sorted[c("G066-A", "G066-B"),], labels=c("66A", "66B"), col=colors[29])
text(SRM.nmds.samples.sorted[c("G070-A", "G070-B", "G070-C"),], labels=c("70A", "70B", "70C"), col=colors[30])
text(SRM.nmds.samples.sorted[c("G071-A-A", "G071-A-B"),], labels=c("71aA", "71aB"), col=colors[31])
text(SRM.nmds.samples.sorted[c("G071-B-A", "G071-B-B"),], labels=c("71bA", "71bB"), col=colors[32])
text(SRM.nmds.samples.sorted[c("G073-A", "G073-B", "G073-C"),], labels=c("73A", "73B", "73C"), col=colors[33]) #all three very off
text(SRM.nmds.samples.sorted[c("G074-A", "G074-B"),], labels=c("74A", "74B"), col=colors[34])
text(SRM.nmds.samples.sorted[c("G079-A", "G079-B"),], labels=c("79A", "79B"), col=colors[35])
text(SRM.nmds.samples.sorted[c("G081-A", "G081-B"),], labels=c("81A", "81B"), col=colors[36])
text(SRM.nmds.samples.sorted[c("G104-A", "G104-B", "G104-remake-C", "G104-remake-D"),], labels=c("104A", "104B", "104C-redo", "104D-redo"), col=colors[37]) #B
text(SRM.nmds.samples.sorted[c("G105-A", "G105-B"),], labels=c("105A", "105B"), col=colors[38])
text(SRM.nmds.samples.sorted[c("G109-A", "G109-B", "G109-C"),], labels=c("109A", "109B", "109C"), col=colors[39]) #109-B BAD
text(SRM.nmds.samples.sorted[c("G110-A", "G110-B"),], labels=c("110A", "110B"), col=colors[40])
text(SRM.nmds.samples.sorted[c("G114-B", "G114-remake-C", "G114-remake-D"),], labels=c("114B", "114C-redo", "114D-redo" ), col=colors[41]) # check these out!
text(SRM.nmds.samples.sorted[c("G116-A", "G116-B"),], labels=c("116A", "116B"), col=colors[42])
text(SRM.nmds.samples.sorted[c("G120-A", "G120-B"),], labels=c("120A", "120B"), col=colors[43])
text(SRM.nmds.samples.sorted[c("G122-A", "G122-B"),], labels=c("122A", "122B"), col=colors[44])
text(SRM.nmds.samples.sorted[c("G127-A", "G127-B", "G127-C"),], labels=c("127A", "127B"), col=colors[45]) #127 B BAD
text(SRM.nmds.samples.sorted[c("G128-A", "G128-C", "G128-D"),], labels=c("128A", "128C", "128D"), col=colors[46])
text(SRM.nmds.samples.sorted[c("G129-A", "G129-B"),], labels=c("129A", "129B"), col=colors[47])
text(SRM.nmds.samples.sorted[c("G132-A", "G132-C", "G132-D"),], labels=c("132A", "132C", "132D"), col=colors[48])
### PLOTTING ALL REPS COLOR CODED AND WITH TREATMENT SYMBOL ###
# symbol key
# 15 = eelgrass = filled square
# 21 = bare = open circle
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G001-A", "G001-B"),], col=colors[1], pch=15)
points(SRM.nmds.samples.sorted[c("G002-A", "G002-B", "G002-C"),], col=colors[2], pch=15) #GOO2-B very diff
points(SRM.nmds.samples.sorted[c("G003-A", "G003-B", "G003-C"),], col=colors[3], pch=15) #G003-C is very different
points(SRM.nmds.samples.sorted[c("G007-A", "G007-B"),], col=colors[4], pch=15)
points(SRM.nmds.samples.sorted[c("G008-A", "G008-B"),], col=colors[5], pch=15)
points(SRM.nmds.samples.sorted[c("G009-A", "G009-B"),], col=colors[6], pch=15)
points(SRM.nmds.samples.sorted[c("G012-A", "G012-B", "G012-C"),], col=colors[7], pch=21)
points(SRM.nmds.samples.sorted[c("G013-A", "G013-C"),], col=colors[8], pch=21)
points(SRM.nmds.samples.sorted[c("G014-A", "G014-B"),], col=colors[9], pch=21)
points(SRM.nmds.samples.sorted[c("G015-A", "G015-B"),], col=colors[10], pch=21)
points(SRM.nmds.samples.sorted[c("G016-A", "G016-B", "G016-C"),], col=colors[11], pch=21) #GO16-A BAD
points(SRM.nmds.samples.sorted[c("G017-A", "G017-B"),], col=colors[12], pch=21) #BAD
points(SRM.nmds.samples.sorted[c("G031-A", "G031-B", "G031-C"),], col=colors[13], pch=15)
points(SRM.nmds.samples.sorted[c("G032-A", "G032-B"),], col=colors[14], pch=15)
points(SRM.nmds.samples.sorted[c("G040-A", "G040-B"),], col=colors[15], pch=21)
points(SRM.nmds.samples.sorted[c("G041-A", "G041-B"),], col=colors[16], pch=21)
points(SRM.nmds.samples.sorted[c("G042-A", "G042-B", "G042-C"),], col=colors[17], pch=21) #G042-C very off
points(SRM.nmds.samples.sorted[c("G043-A", "G043-B"),], col=colors[18], pch=21)
points(SRM.nmds.samples.sorted[c("G045-A", "G045-B"),], col=colors[19], pch=15)
points(SRM.nmds.samples.sorted[c("G047-A", "G047-B"),], col=colors[20], pch=15)
points(SRM.nmds.samples.sorted[c("G049-A", "G049-B"),], col=colors[21], pch=15)
points(SRM.nmds.samples.sorted[c("G053-A", "G053-B", "G053-remake-C", "G053-remake-D"),], col=colors[22], pch=15) #B not good
points(SRM.nmds.samples.sorted[c("G054-A", "G054-B"),], col=colors[23], pch=15)
points(SRM.nmds.samples.sorted[c("G055-A", "G055-B"),], col=colors[24], pch=15) #one is very off
points(SRM.nmds.samples.sorted[c("G057-A", "G057-B", "G057-C"),], col=colors[25], pch=21) #57-B BAD
points(SRM.nmds.samples.sorted[c("G060-A", "G060-B"),], col=colors[26], pch=21)
points(SRM.nmds.samples.sorted[c("G062-B", "G062-C"),], col=colors[27], pch=21)
points(SRM.nmds.samples.sorted[c("G064-A", "G064-B"),], col=colors[28], pch=21)
points(SRM.nmds.samples.sorted[c("G066-A", "G066-B"),], col=colors[29], pch=21)
points(SRM.nmds.samples.sorted[c("G070-A", "G070-B", "G070-C"),], col=colors[30], pch=21)
points(SRM.nmds.samples.sorted[c("G071-A-A", "G071-A-B"),], col=colors[31], pch=15)
points(SRM.nmds.samples.sorted[c("G071-B-A", "G071-B-B"),], col=colors[32], pch=15)
points(SRM.nmds.samples.sorted[c("G073-A", "G073-B", "G073-C"),], col=colors[33], pch=15) #all three very off
points(SRM.nmds.samples.sorted[c("G074-A", "G074-B"),], col=colors[34], pch=15)
points(SRM.nmds.samples.sorted[c("G079-A", "G079-B"),], col=colors[35], pch=21)
points(SRM.nmds.samples.sorted[c("G081-A", "G081-B"),], col=colors[36], pch=21)
points(SRM.nmds.samples.sorted[c("G104-A", "G104-B", "G104-remake-C", "G104-remake-D"),], col=colors[37], pch=21) #B
points(SRM.nmds.samples.sorted[c("G105-A", "G105-B"),], col=colors[38], pch=21)
points(SRM.nmds.samples.sorted[c("G109-A", "G109-B", "G109-C"),], col=colors[39], pch=15) #109-B BAD
points(SRM.nmds.samples.sorted[c("G110-A", "G110-B"),], col=colors[40], pch=15)
points(SRM.nmds.samples.sorted[c("G114-B", "G114-remake-C", "G114-remake-D"),], col=colors[41], pch=21) # check these out!
points(SRM.nmds.samples.sorted[c("G116-A", "G116-B"),], col=colors[42], pch=21)
points(SRM.nmds.samples.sorted[c("G120-A", "G120-B"),], col=colors[43], pch=21)
points(SRM.nmds.samples.sorted[c("G122-A", "G122-B"),], col=colors[44], pch=21)
points(SRM.nmds.samples.sorted[c("G127-A", "G127-B", "G127-C"),], col=colors[45], pch=15) #127 B BAD
points(SRM.nmds.samples.sorted[c("G128-A", "G128-C", "G128-D"),], col=colors[46], pch=15)
points(SRM.nmds.samples.sorted[c("G129-A", "G129-B"),], col=colors[47], pch=15)
points(SRM.nmds.samples.sorted[c("G132-A", "G132-C", "G132-D"),], col=colors[48], pch=15)
#### NEXT, REMOVE SAMPLES THAT DON'T LOOK GOOD, AVERAGE TECH REPS, THEN RE-PLOT BY SITE/TREATMENT ####
# average sample technical reps.  (there's probably an easier way to do this to not manually enter the tech rep names for each sample, possibly via a loop?); remove reps that were poor quality as per NMDS
# Mean of tech reps
G001 <- ave(SRM.data.screened.noPRTC$`G001-A`, SRM.data.screened.noPRTC$`G001-B`)
G002 <- ave(SRM.data.screened.noPRTC$`G002-A`, SRM.data.screened.noPRTC$`G002-B`, SRM.data.screened.noPRTC$`G002-C`)
G003 <- ave(SRM.data.screened.noPRTC$`G003-A`, SRM.data.screened.noPRTC$`G003-B`) #C removed
G007 <- ave(SRM.data.screened.noPRTC$`G007-A`, SRM.data.screened.noPRTC$`G007-B`)
G008 <- ave(SRM.data.screened.noPRTC$`G008-A`, SRM.data.screened.noPRTC$`G008-B`)
G009 <- ave(SRM.data.screened.noPRTC$`G009-A`, SRM.data.screened.noPRTC$`G009-B`)
G110 <- ave(SRM.data.screened.noPRTC$`G110-A`, SRM.data.screened.noPRTC$`G110-B`)
G012 <- ave(SRM.data.screened.noPRTC$`G012-A`, SRM.data.screened.noPRTC$`G012-B`, SRM.data.screened.noPRTC$`G012-C`)
G013 <- ave(SRM.data.screened.noPRTC$'G013-A', SRM.data.screened.noPRTC$'G013-C')
G014 <- ave(SRM.data.screened.noPRTC$`G014-A`, SRM.data.screened.noPRTC$`G014-B`)
G015 <- ave(SRM.data.screened.noPRTC$`G015-A`, SRM.data.screened.noPRTC$`G015-B`)
G016 <- ave(SRM.data.screened.noPRTC$`G016-A`, SRM.data.screened.noPRTC$`G016-B`, SRM.data.screened.noPRTC$`G016-C`)
G017 <- ave(SRM.data.screened.noPRTC$`G017-A`, SRM.data.screened.noPRTC$`G017-B`)
G031 <- ave(SRM.data.screened.noPRTC$`G031-A`, SRM.data.screened.noPRTC$`G031-B`, SRM.data.screened.noPRTC$`G031-C`)
G032 <- ave(SRM.data.screened.noPRTC$`G032-A`, SRM.data.screened.noPRTC$`G032-B`)
G040 <- ave(SRM.data.screened.noPRTC$`G040-A`, SRM.data.screened.noPRTC$`G040-B`)
G041 <- ave(SRM.data.screened.noPRTC$`G041-A`, SRM.data.screened.noPRTC$`G041-B`)
G042 <- ave(SRM.data.screened.noPRTC$`G042-A`, SRM.data.screened.noPRTC$`G042-B`) #C removed
G043 <- ave(SRM.data.screened.noPRTC$`G043-A`, SRM.data.screened.noPRTC$`G043-B`)
G045 <- ave(SRM.data.screened.noPRTC$`G045-A`, SRM.data.screened.noPRTC$`G045-B`)
G047 <- ave(SRM.data.screened.noPRTC$`G047-A`, SRM.data.screened.noPRTC$`G047-B`)
G049 <- ave(SRM.data.screened.noPRTC$`G049-A`, SRM.data.screened.noPRTC$`G049-B`)
G053 <- ave(SRM.data.screened.noPRTC$`G053-A`, SRM.data.screened.noPRTC$`G053-remake-C`, SRM.data.screened.noPRTC$`G053-remake-D`) #B removed
G054 <- ave(SRM.data.screened.noPRTC$`G054-A`, SRM.data.screened.noPRTC$`G054-B`)
G055 <- ave(SRM.data.screened.noPRTC$`G055-A`, SRM.data.screened.noPRTC$`G055-B`, SRM.data.screened.noPRTC$`G055-C`)
G057 <- ave(SRM.data.screened.noPRTC$`G057-A`, SRM.data.screened.noPRTC$`G057-C`) #B removed
G060 <- ave(SRM.data.screened.noPRTC$`G060-A`, SRM.data.screened.noPRTC$`G060-B`)
G062 <- ave(SRM.data.screened.noPRTC$`G062-B`, SRM.data.screened.noPRTC$`G062-C`)
G064 <- ave(SRM.data.screened.noPRTC$`G064-A`, SRM.data.screened.noPRTC$`G064-B`)
G066 <- ave(SRM.data.screened.noPRTC$`G066-A`, SRM.data.screened.noPRTC$`G066-B`)
G070 <- ave(SRM.data.screened.noPRTC$`G070-A`, SRM.data.screened.noPRTC$`G070-B`, SRM.data.screened.noPRTC$`G070-C`)
G071.A <- ave(SRM.data.screened.noPRTC$`G071-A-A`, SRM.data.screened.noPRTC$`G071-A-B`)
G071.B <- ave(SRM.data.screened.noPRTC$`G071-B-A`, SRM.data.screened.noPRTC$`G071-B-B`)
G073 <- ave(SRM.data.screened.noPRTC$`G073-A`, SRM.data.screened.noPRTC$`G073-B`, SRM.data.numeric$`G073-C`)
G074 <- ave(SRM.data.screened.noPRTC$`G074-A`, SRM.data.screened.noPRTC$`G074-B`)
G079 <- ave(SRM.data.screened.noPRTC$`G079-A`, SRM.data.screened.noPRTC$`G079-B`)
G081 <- ave(SRM.data.screened.noPRTC$`G081-A`, SRM.data.screened.noPRTC$`G081-B`)
G104 <- ave(SRM.data.screened.noPRTC$`G104-A`, SRM.data.screened.noPRTC$`G104-remake-C`, SRM.data.screened.noPRTC$`G104-remake-D`) #B removed
G105 <- ave(SRM.data.screened.noPRTC$`G105-A`, SRM.data.screened.noPRTC$`G105-B`)
G109 <- ave(SRM.data.screened.noPRTC$`G109-A`, SRM.data.screened.noPRTC$`G109-C`)
G114 <- ave(SRM.data.screened.noPRTC$`G114-A`, SRM.data.screened.noPRTC$`G114-B`, SRM.data.screened.noPRTC$`G114-remake-C`, SRM.data.screened.noPRTC$`G114-remake-D`)
G116 <- ave(SRM.data.screened.noPRTC$`G116-A`, SRM.data.screened.noPRTC$`G116-B`)
G120 <- ave(SRM.data.screened.noPRTC$`G120-A`, SRM.data.screened.noPRTC$`G120-B`)
G122 <- ave(SRM.data.screened.noPRTC$`G122-A`, SRM.data.screened.noPRTC$`G122-B`)
G127 <- ave(SRM.data.screened.noPRTC$`G127-A`, SRM.data.screened.noPRTC$`G127-C`) #B removed
G128 <- ave(SRM.data.screened.noPRTC$`G128-A`, SRM.data.screened.noPRTC$`G128-C`,SRM.data.screened.noPRTC$`G128-D`)
G129 <- ave(SRM.data.screened.noPRTC$`G129-A`, SRM.data.screened.noPRTC$`G129-B`)
G132 <- ave(SRM.data.screened.noPRTC$`G132-A`, SRM.data.screened.noPRTC$`G132-C`, SRM.data.screened.noPRTC$`G132-D`)
# Tech reps removed: 3C, 42C, 53B, 57B, 104B, 127B
# Mean of tech reps
G001 <- ave(SRM.data.screened.noPRTC$`G001-A`, SRM.data.screened.noPRTC$`G001-B`)
G002 <- ave(SRM.data.screened.noPRTC$`G002-A`, SRM.data.screened.noPRTC$`G002-B`, SRM.data.screened.noPRTC$`G002-C`)
G003 <- ave(SRM.data.screened.noPRTC$`G003-A`, SRM.data.screened.noPRTC$`G003-B`) #C removed
G007 <- ave(SRM.data.screened.noPRTC$`G007-A`, SRM.data.screened.noPRTC$`G007-B`)
G008 <- ave(SRM.data.screened.noPRTC$`G008-A`, SRM.data.screened.noPRTC$`G008-B`)
G009 <- ave(SRM.data.screened.noPRTC$`G009-A`, SRM.data.screened.noPRTC$`G009-B`)
G110 <- ave(SRM.data.screened.noPRTC$`G110-A`, SRM.data.screened.noPRTC$`G110-B`)
G012 <- ave(SRM.data.screened.noPRTC$`G012-A`, SRM.data.screened.noPRTC$`G012-B`, SRM.data.screened.noPRTC$`G012-C`)
G013 <- ave(SRM.data.screened.noPRTC$'G013-A', SRM.data.screened.noPRTC$'G013-C')
G014 <- ave(SRM.data.screened.noPRTC$`G014-A`, SRM.data.screened.noPRTC$`G014-B`)
G015 <- ave(SRM.data.screened.noPRTC$`G015-A`, SRM.data.screened.noPRTC$`G015-B`)
G016 <- ave(SRM.data.screened.noPRTC$`G016-A`, SRM.data.screened.noPRTC$`G016-B`, SRM.data.screened.noPRTC$`G016-C`)
G017 <- ave(SRM.data.screened.noPRTC$`G017-A`, SRM.data.screened.noPRTC$`G017-B`)
G031 <- ave(SRM.data.screened.noPRTC$`G031-A`, SRM.data.screened.noPRTC$`G031-B`, SRM.data.screened.noPRTC$`G031-C`)
G032 <- ave(SRM.data.screened.noPRTC$`G032-A`, SRM.data.screened.noPRTC$`G032-B`)
G040 <- ave(SRM.data.screened.noPRTC$`G040-A`, SRM.data.screened.noPRTC$`G040-B`)
G041 <- ave(SRM.data.screened.noPRTC$`G041-A`, SRM.data.screened.noPRTC$`G041-B`)
G042 <- ave(SRM.data.screened.noPRTC$`G042-A`, SRM.data.screened.noPRTC$`G042-B`) #C removed
G043 <- ave(SRM.data.screened.noPRTC$`G043-A`, SRM.data.screened.noPRTC$`G043-B`)
G045 <- ave(SRM.data.screened.noPRTC$`G045-A`, SRM.data.screened.noPRTC$`G045-B`)
G047 <- ave(SRM.data.screened.noPRTC$`G047-A`, SRM.data.screened.noPRTC$`G047-B`)
G049 <- ave(SRM.data.screened.noPRTC$`G049-A`, SRM.data.screened.noPRTC$`G049-B`)
G053 <- ave(SRM.data.screened.noPRTC$`G053-A`, SRM.data.screened.noPRTC$`G053-remake-C`, SRM.data.screened.noPRTC$`G053-remake-D`) #B removed
G054 <- ave(SRM.data.screened.noPRTC$`G054-A`, SRM.data.screened.noPRTC$`G054-B`)
G055 <- ave(SRM.data.screened.noPRTC$`G055-A`, SRM.data.screened.noPRTC$`G055-B`, SRM.data.screened.noPRTC$`G055-C`)
G057 <- ave(SRM.data.screened.noPRTC$`G057-A`, SRM.data.screened.noPRTC$`G057-C`) #B removed
G060 <- ave(SRM.data.screened.noPRTC$`G060-A`, SRM.data.screened.noPRTC$`G060-B`)
G062 <- ave(SRM.data.screened.noPRTC$`G062-B`, SRM.data.screened.noPRTC$`G062-C`)
G064 <- ave(SRM.data.screened.noPRTC$`G064-A`, SRM.data.screened.noPRTC$`G064-B`)
G066 <- ave(SRM.data.screened.noPRTC$`G066-A`, SRM.data.screened.noPRTC$`G066-B`)
G070 <- ave(SRM.data.screened.noPRTC$`G070-A`, SRM.data.screened.noPRTC$`G070-B`, SRM.data.screened.noPRTC$`G070-C`)
G071.A <- ave(SRM.data.screened.noPRTC$`G071-A-A`, SRM.data.screened.noPRTC$`G071-A-B`)
G071.B <- ave(SRM.data.screened.noPRTC$`G071-B-A`, SRM.data.screened.noPRTC$`G071-B-B`)
# G073 <- ave(SRM.data.screened.noPRTC$`G073-A`, SRM.data.screened.noPRTC$`G073-B`, SRM.data.numeric$`G073-C`)
G074 <- ave(SRM.data.screened.noPRTC$`G074-A`, SRM.data.screened.noPRTC$`G074-B`)
G079 <- ave(SRM.data.screened.noPRTC$`G079-A`, SRM.data.screened.noPRTC$`G079-B`)
G081 <- ave(SRM.data.screened.noPRTC$`G081-A`, SRM.data.screened.noPRTC$`G081-B`)
G104 <- ave(SRM.data.screened.noPRTC$`G104-A`, SRM.data.screened.noPRTC$`G104-remake-C`, SRM.data.screened.noPRTC$`G104-remake-D`) #B removed
G105 <- ave(SRM.data.screened.noPRTC$`G105-A`, SRM.data.screened.noPRTC$`G105-B`)
G109 <- ave(SRM.data.screened.noPRTC$`G109-A`, SRM.data.screened.noPRTC$`G109-C`)
G114 <- ave(SRM.data.screened.noPRTC$`G114-A`, SRM.data.screened.noPRTC$`G114-B`, SRM.data.screened.noPRTC$`G114-remake-C`, SRM.data.screened.noPRTC$`G114-remake-D`)
G116 <- ave(SRM.data.screened.noPRTC$`G116-A`, SRM.data.screened.noPRTC$`G116-B`)
G120 <- ave(SRM.data.screened.noPRTC$`G120-A`, SRM.data.screened.noPRTC$`G120-B`)
G122 <- ave(SRM.data.screened.noPRTC$`G122-A`, SRM.data.screened.noPRTC$`G122-B`)
G127 <- ave(SRM.data.screened.noPRTC$`G127-A`, SRM.data.screened.noPRTC$`G127-C`) #B removed
G128 <- ave(SRM.data.screened.noPRTC$`G128-A`, SRM.data.screened.noPRTC$`G128-C`,SRM.data.screened.noPRTC$`G128-D`)
G129 <- ave(SRM.data.screened.noPRTC$`G129-A`, SRM.data.screened.noPRTC$`G129-B`)
G132 <- ave(SRM.data.screened.noPRTC$`G132-A`, SRM.data.screened.noPRTC$`G132-C`, SRM.data.screened.noPRTC$`G132-D`)
# Tech reps removed: 3C, 42C, 53B, 57B, 104B, 127B
### 1. CREATE NMDS PLOT, MEAN OF TECH REPS - NOT LOG TRANSFORMED ########
#Transpose the file so that rows and columns are switched
SRM.data.mean.t <- t(SRM.data.mean) # t() function transposes, removes PRTC transitions & extraneous info
#Replace NA cells with 0; metaMDS() does not handle NA's
SRM.data.mean.t.noNA <- SRM.data.mean.t
SRM.data.mean.t.noNA[is.na(SRM.data.mean.t.noNA)] <- 0
#Make MDS dissimilarity matrix
SRM.mean.nmds <- metaMDS(SRM.data.mean.t.noNA, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.nmds)
plot(SRM.mean.nmds)
# site (sample) in black circle
# species (variable) in red ticks
# make figure with sample annotations https://stat.ethz.ch/pipermail/r-sig-ecology/2011-September/002371.html
SRM.nmds.mean.samples <- scores(SRM.mean.nmds, display = "sites")
SRM.data.mean.t <- t(SRM.data.mean) # t() function transposes, removes PRTC transitions & extraneous info
PG.E.samples <- PG.E.samples[!PG.E.samples %in% "G073"] #revised PG.E.sample list
SRM.data.mean <- cbind.data.frame(rownames(SRM.data.screened.noPRTC), G001,G002,G003,G007,G008,G009,G110,G012,G013,G014,G015,G016,G017,G031,G032,G040,G041,G042,G043,G045,G047,G049,G053,G054,G055,G057,G060,G062,G064,G066,G070,G071.A,G071.B,G074,G079,G081,G104,G105,G109,G114,G116,G120,G122,G127,G128,G129,G132)
SRM.data.mean <- data.frame(SRM.data.mean[,-1], row.names=SRM.data.mean[,1]) #make first column row names, and delete first column
View(SRM.data.mean)
SRM.data.mean.t <- t(SRM.data.mean) # t() function transposes, removes PRTC transitions & extraneous info
SRM.data.mean.t.noNA <- SRM.data.mean.t
SRM.data.mean.t.noNA[is.na(SRM.data.mean.t.noNA)] <- 0
SRM.mean.nmds <- metaMDS(SRM.data.mean.t.noNA, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.nmds)
plot(SRM.mean.nmds)
SRM.nmds.mean.samples <- scores(SRM.mean.nmds, display = "sites")
library(RColorBrewer)
marker = c("indianred1", "forestgreen", "turquoise3", "mediumpurple1")
ordiplot(SRM.mean.nmds, type="n", main="SRM NMDS, unzoomed")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-2.5,-0.3, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
SRM.data.mean.t.log <- SRM.data.mean.t
SRM.data.mean.t.log[is.na(SRM.data.mean.t.log)] <- 0
SRM.data.mean.t.log <- (SRM.data.mean.t.log+1)
SRM.data.mean.t.log <- data.trans(SRM.data.mean.t.log, method = 'log', plot = FALSE)
SRM.mean.log.nmds <- metaMDS(SRM.data.mean.t.log, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.log.nmds)
plot(SRM.mean.log.nmds)
SRM.nmds.mean.log.samples <- scores(SRM.mean.log.nmds, display = "sites")
ordiplot(SRM.mean.log.nmds, type="n", main="SRM NMDS, log+1 transformed, unzoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.3,-0.1, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.15,.15), ylim=c(-0.05,.06), asp=NA, main="SRM NMDS, log+1 transformed, zoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.15,.15), ylim=c(-0.05,.06), asp=NA, main="SRM NMDS, log+1 transformed, zoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.13,0.05, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.15,.15), ylim=c(-0.05,.06), asp=NA, main="SRM NMDS, log+1 transformed, zoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.13,0.06, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
View(data4anosim.noNA)
# Script #2 in data processing for NOT NORMALIZED DATA
#### 1. CREATE NMDS PLOT, MEAN OF TECH REPS - NOT LOG TRANSFORMED ########
#Transpose the file so that rows and columns are switched
SRM.data.mean.t <- t(SRM.data.mean) # t() function transposes, removes PRTC transitions & extraneous info
#Replace NA cells with 0; metaMDS() does not handle NA's
SRM.data.mean.t.noNA <- SRM.data.mean.t
SRM.data.mean.t.noNA[is.na(SRM.data.mean.t.noNA)] <- 0
#Make MDS dissimilarity matrix
SRM.mean.nmds <- metaMDS(SRM.data.mean.t.noNA, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.nmds)
plot(SRM.mean.nmds)
# site (sample) in black circle
# species (variable) in red ticks
# make figure with sample annotations https://stat.ethz.ch/pipermail/r-sig-ecology/2011-September/002371.html
SRM.nmds.mean.samples <- scores(SRM.mean.nmds, display = "sites")
### Plot using ordiplot()
library(RColorBrewer)
marker = c("indianred1", "forestgreen", "turquoise3", "mediumpurple1")
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot.png")
ordiplot(SRM.mean.nmds, type="n", main="SRM NMDS, unzoomed")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-2.5,-0.3, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
dev.off()
#### Create plot with forced aspect ratio to zoom in ###
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-zoomed.png")
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-3,1), ylim=c(-0.5,0.5), asp=NA, main="SRM NMDS, zoomed")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[4], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-2.5,0.4, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
dev.off()
### Create plot with sample #'s to ID outliers AND with forced aspect ratio to zoom in
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-sample-labels.png")
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-3,1), ylim=c(-0.5,0.5), asp=NA, main="SRM NMDS, zoomed")
text(SRM.nmds.mean.samples[c(CI.B.samples),], label=rownames(SRM.nmds.mean.samples[c(CI.B.samples),]), col=marker[2], pch=8)
text(SRM.nmds.mean.samples[c(CI.E.samples),], label=rownames(SRM.nmds.mean.samples[c(CI.E.samples),]),  col=marker[2], pch=15)
text(SRM.nmds.mean.samples[c(PG.B.samples),], label=rownames(SRM.nmds.mean.samples[c(PG.B.samples),]),  col=marker[3], pch=8)
text(SRM.nmds.mean.samples[c(PG.E.samples),], label=rownames(SRM.nmds.mean.samples[c(PG.E.samples),]),  col=marker[3], pch=15)
text(SRM.nmds.mean.samples[c(WB.B.samples),], label=rownames(SRM.nmds.mean.samples[c(WB.B.samples),]),  col=marker[1], pch=8)
text(SRM.nmds.mean.samples[c(WB.E.samples),], label=rownames(SRM.nmds.mean.samples[c(WB.E.samples),]),  col=marker[1], pch=15)
text(SRM.nmds.mean.samples[c(FB.B.samples),], label=rownames(SRM.nmds.mean.samples[c(FB.B.samples),]),  col=marker[4], pch=8)
text(SRM.nmds.mean.samples[c(FB.E.samples),], label=rownames(SRM.nmds.mean.samples[c(CI.E.samples),]),  col=marker[4], pch=15)
legend(-2.5,0.4, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
dev.off()
#### Create plot with forced aspect ratio to zoom in, not including CI outliers ###
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-zoomed-no-outliers-eelbare.png")
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.2,1), ylim=c(-0.2,0.2), asp=NA, main="Geoduck Gill NMDS, Similarity Plot", width=600,height=600)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8, cex=2)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15, cex=2)
legend(-1.2,-0.07, pch=c(rep(16,4), 8, 15), cex=1.1, pt.cex=1.3, legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
dev.off()
#### Create plot with forced aspect ratio to zoom in, no eel/bare separation ###
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-zoomed.png")
plot.default(x=NULL, y=NULL, type="n", xlab="Dimension 1", ylab="Dimension 2", xlim=c(-2.8,1), ylim=c(-0.4,0.2), asp=NA, main="Geoduck Gill NMDS, Similarity Plot", width=600,height=600, cex.axis=1.4, cex.lab=1.6)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15, cex=2)
legend(-2.7,0.2, pch=c(rep(16,4)), cex=1.1, pt.cex=1.3, legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay"), col=c(marker[4], marker[3], marker[2], marker[1]))
dev.off()
#### Create plot with forced aspect ratio to zoom in, no eel/bare separation, no outliers ###
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-zoomed-no-outliers.png")
par(mar=c(5.1,4.8,4.1,2.1))
plot.default(x=NULL, y=NULL, type="n", xlab="Dimension 1", ylab="Dimension 2",  xlim=c(-1.2,1), ylim=c(-0.2,0.2), asp=NA, main="Geoduck Gill NMDS, Similarity Plot", width=600,height=600, cex.axis=1.4, cex.lab=1.6, cex.main=1.8)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[2], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[3], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[1], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=15, cex=2)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15, cex=2)
legend(-1.2,-0.07, pch=c(rep(15,4)), cex=1.6, pt.cex=2, legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay"), col=c(marker[4], marker[3], marker[2], marker[1]))
dev.off()
#### 2. CREATE NMDS PLOT, MEAN OF TECH REPS - LOG TRANSFORMED ########
#Transpose the file so that rows and columns are switched and normalized by log(x+1)
SRM.data.mean.t.log <- SRM.data.mean.t
SRM.data.mean.t.log[is.na(SRM.data.mean.t.log)] <- 0
SRM.data.mean.t.log <- (SRM.data.mean.t.log+1)
SRM.data.mean.t.log <- data.trans(SRM.data.mean.t.log, method = 'log', plot = FALSE)
#Make MDS dissimilarity matrix
SRM.mean.log.nmds <- metaMDS(SRM.data.mean.t.log, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.log.nmds)
plot(SRM.mean.log.nmds)
# site (sample) in black circle
# species (variable) in red ticks
SRM.nmds.mean.log.samples <- scores(SRM.mean.log.nmds, display = "sites")
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-log-plot.png")
ordiplot(SRM.mean.log.nmds, type="n", main="SRM NMDS, log+1 transformed, unzoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.3,-0.1, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
dev.off()
#### Create plot with forced aspect ratio to zoom in ###
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-SRM-NMDS-plot-log-zoomed.png")
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.15,.15), ylim=c(-0.05,.06), asp=NA, main="SRM NMDS, log+1 transformed, zoomed")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(-.13,0.06, pch=c(rep(16,4), 8, 15), legend=c("Fidalgo Bay", "Port Gamble", 'Case Inlet', "Willapa Bay", "Bare", "Eelgrass"), col=c(marker[4], marker[3], marker[2], marker[1], "black", "black"))
dev.off()
# Eigenvectors
eigen.ml <- envfit(SRM.mean.log.nmds$points, SRM.data.mean.t.log, perm=1000)
eigen.ml
################################################################################################################################
# RUN ANALYSIS OF SIMILARITY (ANOSIM) ON DIFFERENT ITERATIONS OF DATA
###### PREPARE DATA FOR ANOSIM ##########
CI.b <- data.frame(SAMPLE=CI.B.samples, SITE=rep("CI", times=length(CI.B.samples)), TREATMENT=rep("Bare", times=length(CI.B.samples)), BOTH=rep("CI-Bare", times=length(CI.B.samples)))
CI.e <- data.frame(SAMPLE=CI.E.samples, SITE=rep("CI", times=length(CI.E.samples)), TREATMENT=rep("Eelgrass", times=length(CI.E.samples)), BOTH=rep("CI-Eel", times=length(CI.E.samples)))
PG.b <- data.frame(SAMPLE=PG.B.samples, SITE=rep("PG", times=length(PG.B.samples)), TREATMENT=rep("Bare", times=length(PG.B.samples)), BOTH=rep("PG-Bare", times=length(PG.B.samples)))
PG.e <- data.frame(SAMPLE=PG.E.samples, SITE=rep("PG", times=length(PG.E.samples)), TREATMENT=rep("Eelgrass", times=length(PG.E.samples)), BOTH=rep("PG-Eel", times=length(PG.E.samples)))
WB.b <- data.frame(SAMPLE=WB.B.samples, SITE=rep("WB", times=length(WB.B.samples)), TREATMENT=rep("Bare", times=length(WB.B.samples)), BOTH=rep("WB-Bare", times=length(WB.B.samples)))
WB.e <- data.frame(SAMPLE=WB.E.samples, SITE=rep("WB", times=length(WB.E.samples)), TREATMENT=rep("Eelgrass", times=length(WB.E.samples)), BOTH=rep("WB-Eel", times=length(WB.E.samples)))
FB.b <- data.frame(SAMPLE=FB.B.samples, SITE=rep("FB", times=length(FB.B.samples)), TREATMENT=rep("Bare", times=length(FB.B.samples)), BOTH=rep("FB-Bare", times=length(FB.B.samples)))
FB.e <- data.frame(SAMPLE=FB.E.samples, SITE=rep("FB", times=length(FB.E.samples)), TREATMENT=rep("Eelgrass", times=length(FB.E.samples)), BOTH=rep("FB-Eel", times=length(FB.E.samples)))
FB.e
samples4anosim <- rbind.data.frame(CI.b, CI.e, PG.b, PG.e, WB.b, WB.e, FB.e, FB.b, stringsAsFactors = TRUE)
samples4anosim$SAMPLE <- as.character(samples4anosim$SAMPLE)
###############
# ANOSIM of data (not log transformed, no zeros in data (instead, ignore NAs))
data4anosim <- cbind.data.frame(SRM.data.mean.t[order(rownames(SRM.data.mean.t)),], samples4anosim[order(samples4anosim$SAMPLE),])
data4anosim$SITE <- as.factor(data4anosim$SITE)
data4anosim$TREATMENT <- as.factor(data4anosim$TREATMENT)
data4anosim$BOTH <- as.factor(data4anosim$BOTH)
# ANOSIM between sites
sdms.vegdist <- vegdist(data4anosim[,-(ncol(data4anosim)-3):-(ncol(data4anosim))], 'bray', na.rm=TRUE) #this also removes the last 4 columns of data, since they are factors
site.anos<-anosim(sdms.vegdist, grouping=data4anosim$SITE, permutations = 2000)
summary(site.anos)
plot(site.anos)
# ANOSIM between treatments
treatment.anos<-anosim(sdms.vegdist, grouping=data4anosim$TREATMENT, permutations = 2000)
summary(treatment.anos)
plot(treatment.anos)
# ANOSIM between both site/treatments
siteANDtreatment.anos<-anosim(sdms.vegdist, grouping=data4anosim$BOTH, permutations = 2000)
summary(siteANDtreatment.anos)
plot(siteANDtreatment.anos)
############
# ANOSIM of data (not log transformed, including zeros where no peak found)
data4anosim.noNA <- cbind.data.frame(SRM.data.mean.t.noNA[order(rownames(SRM.data.mean.t.noNA)),], samples4anosim[order(samples4anosim$SAMPLE),])
# ANOSIM between sites, no NA
sdms.noNA.vegdist <- vegdist(data4anosim.noNA[,-(ncol(data4anosim)-3):-(ncol(data4anosim))], 'bray', na.rm=TRUE)
site.noNA.anos<-anosim(sdms.vegdist, grouping=data4anosim.noNA$SITE, permutations = 2000)
summary(site.noNA.anos)
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-plot-ANOSIM%03d.png")
plot(site.noNA.anos)
# ANOSIM between treatments, no NA
treatment.noNA.anos<-anosim(sdms.noNA.vegdist, grouping=data4anosim.noNA$TREATMENT, permutations = 2000)
summary(treatment.noNA.anos)
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-plot-ANOSIM%03d.png")
plot(treatment.noNA.anos)
# ANOSIM between both site/treatments, no NA
siteANDtreatment.noNA.anos <- anosim(sdms.noNA.vegdist, grouping=data4anosim.noNA$BOTH, permutations = 2000)
siteANDtreatment.noNA.anos
summary(siteANDtreatment.noNA.anos)
png("Analyses/2017-September_SRM-results/2017-09-04_NotNORM-plot-ANOSIM%03d.png")
plot(siteANDtreatment.noNA.anos)
#############
# ANOSIM of data after log+1 transformation
data4anosim.log <- cbind.data.frame(SRM.data.mean.t.log[order(rownames(SRM.data.mean.t.log)),], samples4anosim[order(samples4anosim$SAMPLE),])
# ANOSIM between sites, log+1 transf.
sdms.log.vegdist <- vegdist(data4anosim.log[,-(ncol(data4anosim)-3):-(ncol(data4anosim))], 'bray', na.rm=TRUE)
site.log.anos<-anosim(sdms.log.vegdist, grouping=data4anosim.log$SITE, permutations = 2000)
summary(site.log.anos)
plot(site.log.anos)
# ANOSIM between treatments, log+1 transf.
treatment.log.anos<-anosim(sdms.log.vegdist, grouping=data4anosim.log$TREATMENT, permutations = 2000)
summary(treatment.log.anos)
plot(treatment.log.anos)
# ANOSIM between site/treatments, log+1 transf.
siteANDtreatment.log.anos <- anosim(sdms.log.vegdist, grouping=data4anosim.log$BOTH, permutations = 2000)
summary(siteANDtreatment.log.anos)
plot(siteANDtreatment.log.anos)
View(data4anosim.noNA)
library(reshape2)
data.melted <- melt(data4anosim.noNA, id=c("SAMPLE", "SITE", "TREATMENT", "BOTH"), variable.name = "Transition", value.name = "Area")
TotAbund.SITE <- do.call(data.frame, aggregate(Area ~ SITE, data.melted, function(x) c(sum=sum(x), sd=sd(x), range=range(x), min=min(x), max=max(x))))
library(ggplot2)
TotSum.bar <- ggplot(TotAbund.SITE, aes(x=SITE, y=Area.sum, fill=SITE)) +
geom_bar(stat="identity", color="black", position = position_dodge()) + ggtitle("Total Abundance by Site") +
geom_errorbar(aes(ymin=Area.sum-Area.sd, ymax=Area.sum+Area.sd), width=.2, position=position_dodge(.9))
ggplot(data.melted, aes(SITE, Area)) + geom_boxplot(aes(colour=SITE)) + ggtitle("Abundance Distribution by Site")
dev.off()
dev.off()
dev.off()
ggplot(data.melted, aes(SITE, Area)) + geom_boxplot(aes(colour=SITE)) + ggtitle("Abundance Distribution by Site")
ggplot(data.melted, aes(SITE, Area)) + geom_violin(aes(colour=SITE)) + ggtitle("Abundance Distribution by Site")
Arachidonate <- data.melted.plus[grepl(c("Arachidonate"), data.melted.plus$Protein.Name),]
