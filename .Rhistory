PG.B.samples <- PG.B$PRVial
WB.E.samples <- WB.E$PRVial
WB.B.samples <- WB.B$PRVial
FB.E.samples <- FB.E$PRVial
FB.B.samples <- FB.B$PRVial
# Isolate eelgrass and bare group sample names
Eelgrass.samples <- c(CI.E.samples, PG.E.samples, WB.E.samples, FB.E.samples)
Bare.samples <- c(CI.B.samples, PG.B.samples, WB.B.samples, FB.B.samples)
### CONVERT AREA DATA TO NUMERIC FORMAT ###
SRM.data.numeric <- SRM.data # First, change all area values to numeric, so I can average, etc. I know that my area data is from column 5 to 120
SRM.data.numeric[,5:120] <- as.numeric(
as.character(
unlist(
SRM.data.numeric[,5:120])
)
)
is.numeric(SRM.data.numeric[2,20]) # confirm area data is numeric, using a random cell. Should equal TRUE.
#### NAME EACH ROW WITH A UNIQUE TRANSITION ID ###
nTransitions <- length(SRM.data.numeric$Transition) # How many transitions are there
Transition.ID <- vector(length=nTransitions) # create empty vector with length= number of transitions
for (i in 1:nTransitions) {
Transition.ID[i] <- paste(SRM.data.numeric[i,3], SRM.data.numeric[i,4])}  # loop that fills empty vector with unique transition ID, built from the peptide sequence (column 3) and the fragment ion (columm 4)
Transition.ID # confirm correctly named transition IDs
length(SRM.data.numeric$Transition) == length(Transition.ID) # confirm that I didn't lose any transitions
row.names(SRM.data.numeric) <- Transition.ID # assign newly created transition IDs as row names
tail(SRM.data.numeric) # confirm changes
# write.csv(SRM.data.numeric, file="Data/2017-08-19_SRM-data-R1.csv") #write this file out for safe keeping
#### CREATE NMDS PLOT ########
#Load the source file for the biostats package, biostats.R script must be saved in working directory
source("References/biostats.R") #Either load the source R script or copy paste. Must run this code before NMDS.
library(vegan)
SRM.data.numeric
SRM.data.numeric[115:116,]
SRM.data.numeric[115:117,]
SRM.data.t <- t(SRM.data.numeric[2:116, -1:-4]) # t() function transposes, removes PRTC transitions, extraneous info
#Replace NA cells with 0; metaMDS() does not handle NA's
SRM.data.t.noNA <- SRM.data.t
SRM.data.t.noNA[is.na(SRM.data.t.noNA)] <- 0
head(SRM.data.t.noNA)
#Make MDS dissimilarity matrix
#
SRM.nmds <- metaMDS(SRM.data.t.noNA, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
# comm= your data.frame or matrix
# distance= bray, (not sure what this means)
# k= # of dimensions to assess
# trymax = max # iterations to attempt if no solution is reached
# Create Shepard plot, which shows scatter around the regression between the interpoint distances in the final configuration (i.e., the distances between each pair of communities) against their original dissimilarities.
stressplot(SRM.nmds)
#Make figure
plot(SRM.nmds)
# site (sample) in black circle
# species (variable) in red ticks
# make figure with sample annotations https://stat.ethz.ch/pipermail/r-sig-ecology/2011-September/002371.html
SRM.nmds.samples <- scores(SRM.nmds, display = "sites")
SRM.nmds.samples.sorted <- SRM.nmds.samples[ order(row.names(SRM.nmds.samples)), ]
rownames(SRM.nmds.samples.sorted)
# Generate 50 distint color ID's in a vector for plotting NMDS data
library(RColorBrewer)
n <- 50
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,n), col=sample(col_vector, n))
colors <- sample(col_vector, 50)
plot(SRM.nmds)
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G001-A", "G001-B"),], col=colors[1], pch=15)
points(SRM.nmds.samples.sorted[c("G002-A", "G002-B", "G002-C"),], col=colors[50], pch=15) #GOO2-B very diff
points(SRM.nmds.samples.sorted[c("G003-A", "G003-B", "G003-C"),], col=colors[3], pch=15) #G003-C is very different
points(SRM.nmds.samples.sorted[c("G001-A", "G001-B"),], col=colors[1], pch=15)
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G001-A", "G001-B"),], col=colors[1], pch=15)
points(SRM.nmds.samples.sorted[c("G002-A", "G002-B", "G002-C"),], col=colors[50], pch=15) #GOO2-B very diff
points(SRM.nmds.samples.sorted[c("G003-A", "G003-B"),], col=colors[3], pch=15) #G003-C is very different
points(SRM.nmds.samples.sorted[c("G007-A", "G007-B"),], col=colors[4], pch=15)
points(SRM.nmds.samples.sorted[c("G008-A", "G008-B"),], col=colors[5], pch=15)
points(SRM.nmds.samples.sorted[c("G009-A", "G009-B"),], col=colors[6], pch=15)
points(SRM.nmds.samples.sorted[c("G012-A", "G012-B", "G012-C"),], col=colors[7], pch=21)
points(SRM.nmds.samples.sorted[c("G013-A", "G013-C"),], col=colors[8], pch=21)
points(SRM.nmds.samples.sorted[c("G014-A", "G014-B"),], col=colors[9], pch=21)
points(SRM.nmds.samples.sorted[c("G015-A", "G015-B"),], col=colors[10], pch=21)
points(SRM.nmds.samples.sorted[c("G016-A", "G016-B", "G016-C"),], col=colors[11], pch=21) #GO16-A BAD
points(SRM.nmds.samples.sorted[c("G017-A", "G017-B"),], col=colors[12], pch=21) #BAD
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G017-A", "G017-B"),], col=colors[12], pch=21) #BAD
points(SRM.nmds.samples.sorted[c("G031-A", "G031-B", "G031-C"),], col=colors[13], pch=15)
points(SRM.nmds.samples.sorted[c("G032-A", "G032-B"),], col=colors[14], pch=15)
points(SRM.nmds.samples.sorted[c("G040-A", "G040-B"),], col=colors[15], pch=21)
points(SRM.nmds.samples.sorted[c("G041-A", "G041-B"),], col=colors[16], pch=21)
points(SRM.nmds.samples.sorted[c("G042-A", "G042-B", "G042-C"),], col=colors[17], pch=21) #G042-C very off
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G042-A", "G042-B"),], col=colors[17], pch=21) #G042-C very off
points(SRM.nmds.samples.sorted[c("G043-A", "G043-B"),], col=colors[18], pch=21)
points(SRM.nmds.samples.sorted[c("G045-A", "G045-B"),], col=colors[19], pch=15)
points(SRM.nmds.samples.sorted[c("G047-A", "G047-B"),], col=colors[20], pch=15)
points(SRM.nmds.samples.sorted[c("G049-A", "G049-B"),], col=colors[21], pch=15)
points(SRM.nmds.samples.sorted[c("G053-A", "G053-B", "G053-remake-C", "G053-remake-D"),], col=colors[22], pch=15) #B not good
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G053-A", "G053-remake-C", "G053-remake-D"),], col=colors[22], pch=15) #B not good
points(SRM.nmds.samples.sorted[c("G054-A", "G054-B"),], col=colors[23], pch=15)
points(SRM.nmds.samples.sorted[c("G055-A", "G055-B"),], col=colors[24], pch=15) #one is very off
points(SRM.nmds.samples.sorted[c("G057-A", "G057-B", "G057-C"),], col=colors[25], pch=21) #one is off
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G057-A", "G057-C"),], col=colors[25], pch=21) #one is off
points(SRM.nmds.samples.sorted[c("G060-A", "G060-B"),], col=colors[26], pch=21)
points(SRM.nmds.samples.sorted[c("G060-A", "G060-B"),], col=colors[26], pch=21)
points(SRM.nmds.samples.sorted[c("G060-A", "G060-B"),], col=colors[26], pch=21)
points(SRM.nmds.samples.sorted[c("G062-B", "G062-C"),], col=colors[27], pch=21)
points(SRM.nmds.samples.sorted[c("G064-A", "G064-B"),], col=colors[50], pch=21)
points(SRM.nmds.samples.sorted[c("G066-A", "G066-B"),], col=colors[29], pch=21)
points(SRM.nmds.samples.sorted[c("G070-A", "G070-B", "G070-C"),], col=colors[30], pch=21)
points(SRM.nmds.samples.sorted[c("G071-A-A", "G071-A-B"),], col=colors[31], pch=15)
points(SRM.nmds.samples.sorted[c("G071-B-A", "G071-B-B"),], col=colors[32], pch=15)
points(SRM.nmds.samples.sorted[c("G073-A", "G073-B", "G073-C"),], col=colors[33], pch=15) #all three very off
points(SRM.nmds.samples.sorted[c("G074-A", "G074-B"),], col=colors[34], pch=15)
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G073-A", "G073-B", "G073-C"),], col=colors[33], pch=15) #all three very off
points(SRM.nmds.samples.sorted[c("G074-A", "G074-B"),], col=colors[34], pch=15)
points(SRM.nmds.samples.sorted[c("G079-A", "G079-B"),], col=colors[35], pch=21)
points(SRM.nmds.samples.sorted[c("G081-A", "G081-B"),], col=colors[36], pch=21)
points(SRM.nmds.samples.sorted[c("G104-A", "G104-B", "G104-remake-C", "G104-remake-D"),], col=colors[37], pch=21) #B
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G104-A", "G104-remake-C", "G104-remake-D"),], col=colors[37], pch=21) #B
points(SRM.nmds.samples.sorted[c("G105-A", "G105-B"),], col=colors[38], pch=21)
points(SRM.nmds.samples.sorted[c("G109-A", "G109-B", "G109-C"),], col=colors[39], pch=15)
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G109-A", "G109-C"),], col=colors[39], pch=15)
points(SRM.nmds.samples.sorted[c("G110-A", "G110-B"),], col=colors[40], pch=15)
points(SRM.nmds.samples.sorted[c("G114-B", "G114-remake-C", "G114-remake-D"),], col=colors[41], pch=21) # check these out!
points(SRM.nmds.samples.sorted[c("G116-A", "G116-B"),], col=colors[42], pch=21)
points(SRM.nmds.samples.sorted[c("G120-A", "G120-B"),], col=colors[43], pch=21)
points(SRM.nmds.samples.sorted[c("G122-A", "G122-B"),], col=colors[44], pch=21)
points(SRM.nmds.samples.sorted[c("G127-A", "G127-B", "G127-C"),], col=colors[45], pch=15) #one is off
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1.5,3), ylim=c(-0.5,0.5), asp=NA)
points(SRM.nmds.samples.sorted[c("G127-A", "G127-C"),], col=colors[45], pch=15) #one is off
points(SRM.nmds.samples.sorted[c("G128-A", "G128-C", "G128-D"),], col=colors[46], pch=15)
points(SRM.nmds.samples.sorted[c("G129-A", "G129-B"),], col=colors[47], pch=15)
points(SRM.nmds.samples.sorted[c("G132-A", "G132-C", "G132-D"),], col=colors[48], pch=15)
#### NEXT, REMOVE SAMPLES THAT DON'T LOOK GOOD, AVERAGE TECH REPS, THEN RE-PLOT BY SITE/TREATMENT ####
# average sample technical reps.  (there's probably an easier way to do this to not manually enter the tech rep names for each sample, possibly via a loop?); remove reps that were poor quality as per NMDS
G013 <- ave(SRM.data.numeric$'G013-A', SRM.data.numeric$'G013-C')
G120 <- ave(SRM.data.numeric$`G120-A`, SRM.data.numeric$`G120-B`)
G047 <- ave(SRM.data.numeric$`G047-A`, SRM.data.numeric$`G047-B`)
G017 <- ave(SRM.data.numeric$`G017-A`, SRM.data.numeric$`G017-B`)
G079 <- ave(SRM.data.numeric$`G079-A`, SRM.data.numeric$`G079-B`)
G127 <- ave(SRM.data.numeric$`G127-A`, SRM.data.numeric$`G127-C`) #B removed
G060 <- ave(SRM.data.numeric$`G060-A`, SRM.data.numeric$`G060-B`)
G009 <- ave(SRM.data.numeric$`G009-A`, SRM.data.numeric$`G009-B`)
G002 <- ave(SRM.data.numeric$`G002-B`, SRM.data.numeric$`G002-C`) #A removed
G128 <- ave(SRM.data.numeric$`G128-A`, SRM.data.numeric$`G128-C`,SRM.data.numeric$`G128-D`)
G071.A <- ave(SRM.data.numeric$`G071-A-A`, SRM.data.numeric$`G071-A-B`)
G114 <- ave(SRM.data.numeric$`G114-A`, SRM.data.numeric$`G114-B`, SRM.data.numeric$`G114-remake-C`, SRM.data.numeric$`G114-remake-D`)
G045 <- ave(SRM.data.numeric$`G045-A`, SRM.data.numeric$`G045-B`)
G132 <- ave(SRM.data.numeric$`G132-A`, SRM.data.numeric$`G132-C`, SRM.data.numeric$`G132-D`)
G031 <- ave(SRM.data.numeric$`G031-A`, SRM.data.numeric$`G031-B`, SRM.data.numeric$`G031-C`)
G012 <- ave(SRM.data.numeric$`G012-A`, SRM.data.numeric$`G012-B`, SRM.data.numeric$`G012-C`)
G116 <- ave(SRM.data.numeric$`G116-A`, SRM.data.numeric$`G116-B`)
G043 <- ave(SRM.data.numeric$`G043-A`, SRM.data.numeric$`G043-B`)
G015 <- ave(SRM.data.numeric$`G015-A`, SRM.data.numeric$`G015-B`)
G040 <- ave(SRM.data.numeric$`G040-A`, SRM.data.numeric$`G040-B`)
G110 <- ave(SRM.data.numeric$`G110-A`, SRM.data.numeric$`G110-B`)
G008 <- ave(SRM.data.numeric$`G008-A`, SRM.data.numeric$`G008-B`)
G109 <- ave(SRM.data.numeric$`G109-A`, SRM.data.numeric$`G109-C`)
G122 <- ave(SRM.data.numeric$`G122-A`, SRM.data.numeric$`G122-B`)
G041 <- ave(SRM.data.numeric$`G041-A`, SRM.data.numeric$`G041-B`)
G066 <- ave(SRM.data.numeric$`G066-A`, SRM.data.numeric$`G066-B`)
G105 <- ave(SRM.data.numeric$`G105-A`, SRM.data.numeric$`G105-B`)
G032 <- ave(SRM.data.numeric$`G032-A`, SRM.data.numeric$`G032-B`)
G129 <- ave(SRM.data.numeric$`G129-A`, SRM.data.numeric$`G129-B`)
G054 <- ave(SRM.data.numeric$`G054-A`, SRM.data.numeric$`G054-B`)
G081 <- ave(SRM.data.numeric$`G081-A`, SRM.data.numeric$`G081-B`)
G003 <- ave(SRM.data.numeric$`G003-A`, SRM.data.numeric$`G003-B`) #C removed
G074 <- ave(SRM.data.numeric$`G074-A`, SRM.data.numeric$`G074-B`)
G014 <- ave(SRM.data.numeric$`G014-A`, SRM.data.numeric$`G014-B`)
G049 <- ave(SRM.data.numeric$`G049-A`, SRM.data.numeric$`G049-B`)
G053 <- ave(SRM.data.numeric$`G053-A`, SRM.data.numeric$`G053-remake-C`, SRM.data.numeric$`G053-remake-D`) #B removed
G104 <- ave(SRM.data.numeric$`G104-A`, SRM.data.numeric$`G104-remake-C`, SRM.data.numeric$`G104-remake-D`) #B removed
G055 <- ave(SRM.data.numeric$`G055-A`, SRM.data.numeric$`G055-B`, SRM.data.numeric$`G055-C`)
G042 <- ave(SRM.data.numeric$`G042-A`, SRM.data.numeric$`G042-B`) #C removed
G064 <- ave(SRM.data.numeric$`G064-A`, SRM.data.numeric$`G064-B`)
G057 <- ave(SRM.data.numeric$`G057-A`, SRM.data.numeric$`G057-C`)
G007 <- ave(SRM.data.numeric$`G007-A`, SRM.data.numeric$`G007-B`)
G070 <- ave(SRM.data.numeric$`G070-A`, SRM.data.numeric$`G070-B`, SRM.data.numeric$`G070-C`)
G001 <- ave(SRM.data.numeric$`G001-A`, SRM.data.numeric$`G001-B`)
G071.B <- ave(SRM.data.numeric$`G071-B-A`, SRM.data.numeric$`G071-B-B`)
G062 <- ave(SRM.data.numeric$`G062-B`, SRM.data.numeric$`G062-C`)
SRM.data.mean <- cbind.data.frame(rownames(SRM.data.numeric), G013, G120, G047, G017, G079, G127, G060, G009, G002, G128, G016, G071.A, G114, G045, G132, G031, G012, G116, G043, G015, G040, G110, G008, G109, G122, G041, G066, G105, G032, G129, G054, G081, G003, G074, G014, G049, G053, G104, G055, G042, G064, G073, G057, G007, G070,  G001, G071.B, G062) # combine all tech. replicate mean vectors into new data frame
head(SRM.data.mean)
SRM.data.mean <- cbind.data.frame(rownames(SRM.data.numeric), G013, G120, G047, G017, G079, G060, G009, G002, G128, G071.A, G114, G045, G132, G031, G012, G116, G043, G015, G040, G110, G008, G109, G122, G041, G066, G105, G032, G129, G054, G081, G003, G074, G014, G049, G053, G104, G055, G042, G064, G073, G057, G007, G070,  G001, G071.B, G062) # combine all tech. replicate mean vectors into new data frame
SRM.data.mean <- cbind.data.frame(rownames(SRM.data.numeric), G013, G120, G047, G017, G079, G127, G060, G009, G002, G128, G071.A, G114, G045, G132, G031, G012, G116, G043, G015, G040, G110, G008, G109, G122, G041, G066, G105, G032, G129, G054, G081, G003, G074, G014, G049, G053, G104, G055, G042, G064, G057, G007, G070,  G001, G071.B, G062) # combine all tech. replicate mean vectors into new data frame
head(SRM.data.mean)
ncol(SRM.data.mean)
nrow(SRM.data.mean)
SRM.data.mean[115:117,1:2]
rownames(SRM.data.mean) <- SRM.data.mean[,1]
View(SRM.data.mean)
SRM.data.mean.t <- t(SRM.data.mean[2:116, -1]) # t() function transposes, removes PRTC transitions & extraneous info
SRM.data.mean.t
#Replace NA cells with 0; metaMDS() does not handle NA's
SRM.data.mean.t.noNA <- SRM.data.mean.t
SRM.data.mean.t.noNA[is.na(SRM.data.mean.t.noNA)] <- 0
SRM.data.mean.t.noNA
SRM.mean.nmds <- metaMDS(SRM.data.mean.t.noNA, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.nmds)
plot(SRM.mean.nmds)
# make figure with sample annotations https://stat.ethz.ch/pipermail/r-sig-ecology/2011-September/002371.html
SRM.nmds.mean.samples <- scores(SRM.mean.nmds, display = "sites")
SRM.nmds.mean.transitions <- scores(SRM.nmds, display = "species")
# this probably isn't necessary
### Let's plot using ordiplot()
library(RColorBrewer)
marker = c(color = brewer.pal(4, "Set1"))
ordiplot(SRM.mean.nmds, type="n")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
CI.B.samples
PG.E.samples
CI.B.samples[-"G016"]
CI.B.samples[!"G016"]
CI.B.samples(!"G016")
CI.B.samples
CI.B.samples[(!"G016")]
CI.B.samples[(-"G016")]
CI.B.samples[1:4,6]
CI.B.samples[c(1:4,6)]
CI.B.samples <- CI.B.samples[c(1:4,6)]
PG.E.samples
PG.E.samples <- PG.E.samples[c(1,2,4,5,6)]
ordiplot(SRM.mean.nmds, type="n")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(1.5,0.7, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
ordiplot(SRM.mean.nmds, type="n")
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(1,2, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
legend(1.5,1, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-1,2.5), ylim=c(-0.4,0.25), asp=NA)
points(SRM.nmds.mean.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(1.5,0.2, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
#Transpose the file so that rows and columns are switched and normalized by log(x+1)
SRM.data.mean.t.log <- SRM.data.mean.t
SRM.data.mean.t.log[is.na(SRM.data.mean.t.log)] <- 0
SRM.data.mean.t.log <- (SRM.data.mean.t.log+1)
SRM.data.mean.t.log <- data.trans(SRM.data.mean.t.log, method = 'log', plot = FALSE)
#Make MDS dissimilarity matrix
#
SRM.mean.log.nmds <- metaMDS(SRM.data.mean.t.log, distance = 'bray', k = 2, trymax = 3000, autotransform = FALSE)
stressplot(SRM.mean.log.nmds)
plot(SRM.mean.log.nmds)
SRM.nmds.mean.log.samples <- scores(SRM.mean.log.nmds, display = "sites")
library(RColorBrewer)
marker = c(color = brewer.pal(4, "Set1"))
# png("Analyses/2017-August_SRM-Analysis/2017-08-24_SRM-NMDS-log-plot.png")
ordiplot(SRM.mean.log.nmds, type="n")
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(.225,-0.075, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.2,.4), ylim=c(-0.1,.15), asp=NA)
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(.3,0.125, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
legend(.3,0.14, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
plot.default(x=NULL, y=NULL, type="n", xlab="NMDS axis 1", ylab="NMDS axis 2", xlim=c(-.2,.4), ylim=c(-0.1,.15), asp=NA)
points(SRM.nmds.mean.log.samples[c(CI.B.samples),], col=marker[1], pch=8)
points(SRM.nmds.mean.log.samples[c(CI.E.samples),], col=marker[1], pch=15)
points(SRM.nmds.mean.log.samples[c(PG.B.samples),], col=marker[2], pch=8)
points(SRM.nmds.mean.log.samples[c(PG.E.samples),], col=marker[2], pch=15)
points(SRM.nmds.mean.log.samples[c(WB.B.samples),], col=marker[3], pch=8)
points(SRM.nmds.mean.log.samples[c(WB.E.samples),], col=marker[3], pch=15)
points(SRM.nmds.mean.log.samples[c(FB.B.samples),], col=marker[4], pch=8)
points(SRM.nmds.mean.log.samples[c(FB.E.samples),], col=marker[4], pch=15)
legend(.25,0.14, pch=c(rep(16,4), 8, 15), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Port Gamble", "Bare", "Eelgrass"), col=c(marker[1], marker[2], marker[3], marker[4], "black", "black"))
eigen.ml <- envfit(SRM.mean.log.nmds$points, SRM.data.mean.t.log, perm=1000)
eigen.ml
SRM.data.mean.t.log
CI.b <- data.frame(SAMPLE=CI.B.samples, SITE=rep("CI", times=length(CI.B.samples)), TREATMENT=rep("Bare", times=length(CI.B.samples)))
CI.e <- data.frame(SAMPLE=CI.E.samples, SITE=rep("CI", times=length(CI.E.samples)), TREATMENT=rep("Eelgrass", times=length(CI.E.samples)))
PG.b <- data.frame(SAMPLE=PG.B.samples, SITE=rep("PG", times=length(PG.B.samples)), TREATMENT=rep("Bare", times=length(PG.B.samples)))
PG.e <- data.frame(SAMPLE=PG.E.samples, SITE=rep("PG", times=length(PG.E.samples)), TREATMENT=rep("Eelgrass", times=length(PG.E.samples)))
WB.b <- data.frame(SAMPLE=WB.B.samples, SITE=rep("WB", times=length(WB.B.samples)), TREATMENT=rep("Bare", times=length(WB.B.samples)))
WB.e <- data.frame(SAMPLE=WB.E.samples, SITE=rep("WB", times=length(WB.E.samples)), TREATMENT=rep("Eelgrass", times=length(WB.E.samples)))
FB.b <- data.frame(SAMPLE=FB.B.samples, SITE=rep("FB", times=length(FB.B.samples)), TREATMENT=rep("Bare", times=length(FB.B.samples)))
FB.e <- data.frame(SAMPLE=FB.E.samples, SITE=rep("FB", times=length(FB.E.samples)), TREATMENT=rep("Eelgrass", times=length(FB.E.samples)))
samples4anosim <- rbind.data.frame(CI.b, CI.e, PG.b, PG.e, WB.b, WB.e, FB.e, FB.b, stringsAsFactors = TRUE)
samples4anosim
data4anosim <- cbind.data.frame(SRM.data.mean.t.log[order(rownames(SRM.data.mean.t.log)),], samples4anosim[order(samples4anosim$SAMPLE),])
str(data4anosim.s)
str(data4anosim.)
str(data4anosim)
View(data4anosim)
samples4anosim
data4anosim
SRM.data.mean.t.log
data4anosim <- cbind.data.frame(SRM.data.mean.t.log[order(rownames(SRM.data.mean.t.log)),], samples4anosim[order(samples4anosim$SAMPLE),])
data4anosim
View(samples4anosim)
samples4anosim[order(samples4anosim$SAMPLE),]
samples4anosim[,order(samples4anosim$SAMPLE)]
samples4anosim[1,1]
is.factor(samples4anosim[1,1])
samples4anosim <- rbind.data.frame(CI.b, CI.e, PG.b, PG.e, WB.b, WB.e, FB.e, FB.b, stringsAsFactors = FALSE)
data4anosim <- cbind.data.frame(SRM.data.mean.t.log[order(rownames(SRM.data.mean.t.log)),], samples4anosim[order(samples4anosim$SAMPLE),])
data4anosim
order(samples4anosim$SAMPLE)
samples4anosim$SAMPLE <- as.character(samples4anosim$SAMPLE)
order(samples4anosim$SAMPLE)
samples4anosim[order(samples4anosim$SAMPLE),]
data4anosim <- cbind.data.frame(SRM.data.mean.t.log[order(rownames(SRM.data.mean.t.log)),], samples4anosim[order(samples4anosim$SAMPLE),])
data4anosim
tail(data4anosim)
data4anosim.[,115]
is.factor(data4anosim$SITE)
ncol(data4anosim)
data4anosim[,116:118]
sdms.vegdist <- vegdist(data4anosim[,-116:-118], 'bray', na.rm=TRUE)
site.anos<-anosim(sdms.vegdist, grouping=data4anosim$SITE)
summary(site.anos)
plot(site.anos)
summary(treatment.anos)
treatment.anos<-anosim(sdms.vegdist, grouping=data4anosim$TREATMENT)
summary(treatment.anos)
plot(treatment.anos)
plot(site.anos)
plot(treatment.anos)
summary(site.anos)
plot(site.anos)
summary(treatment.anos)
plot(treatment.anos)
?anosim()
site.anos<-anosim(sdms.vegdist, grouping=data4anosim$SITE, permutations = 2000)
summary(site.anos)
plot(site.anos)
treatment.anos<-anosim(sdms.vegdist, grouping=data4anosim$TREATMENT, permutations = 2000)
summary(treatment.anos)
plot(treatment.anos)
summary(site.anos)
plot(site.anos)
SRM.proteins <- data.frame(protein=SRM.data[2:116,c(1,3,4)]) #protein name to each transition
SRM.proteins[,1] <- sub(" cds.*", "", SRM.proteins[,1])
SRM.data.mean.ordered <- as.matrix(SRM.data.mean[ , order(names(SRM.data.mean))])
CI.B.etc <- cbind(CI.B, Order=c(rep(1, times=nrow(CI.B))), Color=c(rep(2, times=nrow(CI.B))), Symbol=c(rep(20, times=nrow(CI.B))))
CI.E.etc <- cbind(CI.E, Order=c(rep(2, times=nrow(CI.E))), Color=c(rep(2, times=nrow(CI.E))), Symbol=c(rep(100, times=nrow(CI.E))))
PG.B.etc <- cbind(PG.B, Order=c(rep(3, times=nrow(PG.B))), Color=c(rep(6, times=nrow(PG.B))), Symbol=c(rep(20, times=nrow(PG.B))))
PG.E.etc <- cbind(PG.E, Order=c(rep(4, times=nrow(PG.E))), Color=c(rep(6, times=nrow(PG.E))), Symbol=c(rep(100, times=nrow(PG.E))))
WB.B.etc <- cbind(WB.B, Order=c(rep(5, times=nrow(WB.B))), Color=c(rep(3, times=nrow(WB.B))), Symbol=c(rep(20, times=nrow(WB.B))))
WB.E.etc <- cbind(WB.E, Order=c(rep(6, times=nrow(WB.E))), Color=c(rep(3, times=nrow(WB.E))), Symbol=c(rep(100, times=nrow(WB.E))))
FB.B.etc <- cbind(FB.B, Order=c(rep(7, times=nrow(FB.B))), Color=c(rep(4, times=nrow(FB.B))), Symbol=c(rep(20, times=nrow(FB.B))))
FB.E.etc <- cbind(FB.E, Order=c(rep(8, times=nrow(FB.E))), Color=c(rep(4, times=nrow(FB.E))), Symbol=c(rep(100, times=nrow(FB.E))))
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
library(plyr)
samples4plots <- arrange(samples4plots, samples4plots$PRVial)
SRM.data4plots <- rbind.data.frame(SRM.data.mean.ordered, Order=samples4plots$Order, Color=samples4plots$Color, Symbol=samples4plots$Symbol)
SRM.data4plots.ordered <- as.matrix(SRM.data4plots[ ,order(SRM.data4plots[which(rownames(SRM.data4plots) == 'Order'), ]) ])
# HSP 90
par(mfrow=c(3,3))
barplot(SRM.data4plots.ordered[1,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[2,], main=SRM.proteins[4,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[3,], main=SRM.proteins[7,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[4,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[5,], main=SRM.proteins[4,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[6,], main=SRM.proteins[7,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[7,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[8,], main=SRM.proteins[4,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[9,], main=SRM.proteins[7,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
par(mfrow=c(3,3))
barplot(SRM.data4plots.ordered[1,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
barplot(SRM.data4plots.ordered[1,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
SRM.data4plots.ordered[1,]
SRM.data4plots.ordered[2,]
head(SRM.data4plots.ordered)
SRM.data4plots
CI.B
CI.b
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
samples4plots
CI.B
CI.b
CI.B.etc <- cbind(CI.b, Order=c(rep(1, times=nrow(CI.b))), Color=c(rep(2, times=nrow(CI.b))), Symbol=c(rep(20, times=nrow(CI.b))))
CI.E.etc <- cbind(CI.e, Order=c(rep(2, times=nrow(CI.e))), Color=c(rep(2, times=nrow(CI.E))), Symbol=c(rep(100, times=nrow(CI.e))))
PG.B.etc <- cbind(PG.b, Order=c(rep(3, times=nrow(PG.b))), Color=c(rep(6, times=nrow(PG.B))), Symbol=c(rep(20, times=nrow(PG.b))))
PG.E.etc <- cbind(PG.e, Order=c(rep(4, times=nrow(PG.e))), Color=c(rep(6, times=nrow(PG.E))), Symbol=c(rep(100, times=nrow(PG.e))))
WB.B.etc <- cbind(WB.b, Order=c(rep(5, times=nrow(WB.b))), Color=c(rep(3, times=nrow(WB.B))), Symbol=c(rep(20, times=nrow(WB.b))))
WB.E.etc <- cbind(WB.e, Order=c(rep(6, times=nrow(WB.e))), Color=c(rep(3, times=nrow(WB.E))), Symbol=c(rep(100, times=nrow(WB.e))))
FB.B.etc <- cbind(FB.b, Order=c(rep(7, times=nrow(FB.b))), Color=c(rep(4, times=nrow(FB.B))), Symbol=c(rep(20, times=nrow(FB.b))))
FB.E.etc <- cbind(FB.e, Order=c(rep(8, times=nrow(FB.e))), Color=c(rep(4, times=nrow(FB.E))), Symbol=c(rep(100, times=nrow(FB.e))))
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
CI.b
CI.B.etc <- cbind(CI.b, Order=c(rep(1, times=nrow(CI.b))), Color=c(rep(2, times=nrow(CI.b))), Symbol=c(rep(20, times=nrow(CI.b))))
CI.E.etc <- cbind(CI.e, Order=c(rep(2, times=nrow(CI.e))), Color=c(rep(2, times=nrow(CI.E))), Symbol=c(rep(100, times=nrow(CI.e))))
PG.B.etc <- cbind(PG.b, Order=c(rep(3, times=nrow(PG.b))), Color=c(rep(6, times=nrow(PG.B))), Symbol=c(rep(20, times=nrow(PG.b))))
PG.E.etc <- cbind(PG.e, Order=c(rep(4, times=nrow(PG.e))), Color=c(rep(6, times=nrow(PG.E))), Symbol=c(rep(100, times=nrow(PG.e))))
WB.B.etc <- cbind(WB.b, Order=c(rep(5, times=nrow(WB.b))), Color=c(rep(3, times=nrow(WB.B))), Symbol=c(rep(20, times=nrow(WB.b))))
WB.E.etc <- cbind(WB.e, Order=c(rep(6, times=nrow(WB.e))), Color=c(rep(3, times=nrow(WB.E))), Symbol=c(rep(100, times=nrow(WB.e))))
CI.B.etc <- cbind(CI.b, Order=c(rep(1, times=nrow(CI.b))), Color=c(rep(2, times=nrow(CI.b))), Symbol=c(rep(20, times=nrow(CI.b))))
CI.E.etc <- cbind(CI.e, Order=c(rep(2, times=nrow(CI.e))), Color=c(rep(2, times=nrow(CI.E))), Symbol=c(rep(100, times=nrow(CI.e))))
PG.B.etc <- cbind(PG.b, Order=c(rep(3, times=nrow(PG.b))), Color=c(rep(6, times=nrow(PG.B))), Symbol=c(rep(20, times=nrow(PG.b))))
PG.E.etc <- cbind(PG.e, Order=c(rep(4, times=nrow(PG.e))), Color=c(rep(6, times=nrow(PG.E))), Symbol=c(rep(100, times=nrow(PG.e))))
CI.B.etc <- cbind(CI.b, Order=c(rep(1, times=nrow(CI.b))), Color=c(rep(2, times=nrow(CI.b))), Symbol=c(rep(20, times=nrow(CI.b))))
CI.E.etc <- cbind(CI.e, Order=c(rep(2, times=nrow(CI.e))), Color=c(rep(2, times=nrow(CI.e))), Symbol=c(rep(100, times=nrow(CI.e))))
PG.B.etc <- cbind(PG.b, Order=c(rep(3, times=nrow(PG.b))), Color=c(rep(6, times=nrow(PG.b))), Symbol=c(rep(20, times=nrow(PG.b))))
PG.E.etc <- cbind(PG.e, Order=c(rep(4, times=nrow(PG.e))), Color=c(rep(6, times=nrow(PG.e))), Symbol=c(rep(100, times=nrow(PG.e))))
WB.B.etc <- cbind(WB.b, Order=c(rep(5, times=nrow(WB.b))), Color=c(rep(3, times=nrow(WB.b))), Symbol=c(rep(20, times=nrow(WB.b))))
WB.E.etc <- cbind(WB.e, Order=c(rep(6, times=nrow(WB.e))), Color=c(rep(3, times=nrow(WB.e))), Symbol=c(rep(100, times=nrow(WB.e))))
FB.B.etc <- cbind(FB.b, Order=c(rep(7, times=nrow(FB.b))), Color=c(rep(4, times=nrow(FB.b))), Symbol=c(rep(20, times=nrow(FB.b))))
FB.E.etc <- cbind(FB.e, Order=c(rep(8, times=nrow(FB.e))), Color=c(rep(4, times=nrow(FB.e))), Symbol=c(rep(100, times=nrow(FB.e))))
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
samples4plots <- arrange(samples4plots, samples4plots$SAMPLE)
samples4plots
samples4plots$SAMPLE <- is.character(samples4plots$SAMPLE)
samples4plots <- arrange(samples4plots, samples4plots$SAMPLE)
samples4plots
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
samples4plots$SAMPLE <- as.character(samples4plots$SAMPLE)
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
samples4plots
samples4plots$SAMPLE <- as.character(samples4plots$SAMPLE)
samples4plots <- arrange(samples4plots, samples4plots$SAMPLE)
samples4plots
SRM.data4plots <- rbind.data.frame(SRM.data.mean.ordered, Order=samples4plots$Order, Color=samples4plots$Color, Symbol=samples4plots$Symbol)
SRM.data4plots
SRM.data4plots.ordered <- as.matrix(SRM.data4plots[-1, order(SRM.data4plots[which(rownames(SRM.data4plots) == 'Order'), ]) ])
SRM.data4plots.ordered
barplot(SRM.data4plots.ordered[1,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
View(SRM.data4plots.ordered)
SRM.data.mean.ordered
srm.data.mean
SRM.data.mean
SRM.data.mean.ordered <- SRM.data.mean.ordered[-1,-1]
SRM.data.mean.ordered <- as.matrix(SRM.data.mean[ , order(names(SRM.data.mean))])
SRM.data.mean.ordered
SRM.data.mean
SRM.data.mean
SRM.data.mean[,1]
SRM.data.mean[,2]
SRM.data.mean[,1]
SRM.data.mean[1,]
SRM.data.mean[2,]
SRM.data.mean.ordered <- SRM.data.mean.ordered[-1,-1]
SRM.data.mean.ordered
SRM.data.mean.ordered <- SRM.data.mean.ordered[-1,-1]
SRM.data.mean.ordered
ncol(SRM.data.mean)
SRM.data.mean[,47]
SRM.data.mean[,48]
SRM.data.mean[,46]
SRM.data.mean
SRM.data.mean[1,]
SRM.data.mean[,1]
rownames(SRM.data.mean)
SRM.data.mean.ordered <- SRM.data.mean[-1,-1]
SRM.data.mean.ordered <- as.matrix(SRM.data.mean.ordered[ , order(names(SRM.data.mean.ordered))])
SRM.data.mean.ordered
CI.B.etc <- cbind(CI.b, Order=c(rep(1, times=nrow(CI.b))), Color=c(rep(2, times=nrow(CI.b))), Symbol=c(rep(20, times=nrow(CI.b))))
CI.E.etc <- cbind(CI.e, Order=c(rep(2, times=nrow(CI.e))), Color=c(rep(2, times=nrow(CI.e))), Symbol=c(rep(100, times=nrow(CI.e))))
PG.B.etc <- cbind(PG.b, Order=c(rep(3, times=nrow(PG.b))), Color=c(rep(6, times=nrow(PG.b))), Symbol=c(rep(20, times=nrow(PG.b))))
PG.E.etc <- cbind(PG.e, Order=c(rep(4, times=nrow(PG.e))), Color=c(rep(6, times=nrow(PG.e))), Symbol=c(rep(100, times=nrow(PG.e))))
WB.B.etc <- cbind(WB.b, Order=c(rep(5, times=nrow(WB.b))), Color=c(rep(3, times=nrow(WB.b))), Symbol=c(rep(20, times=nrow(WB.b))))
WB.E.etc <- cbind(WB.e, Order=c(rep(6, times=nrow(WB.e))), Color=c(rep(3, times=nrow(WB.e))), Symbol=c(rep(100, times=nrow(WB.e))))
FB.B.etc <- cbind(FB.b, Order=c(rep(7, times=nrow(FB.b))), Color=c(rep(4, times=nrow(FB.b))), Symbol=c(rep(20, times=nrow(FB.b))))
FB.E.etc <- cbind(FB.e, Order=c(rep(8, times=nrow(FB.e))), Color=c(rep(4, times=nrow(FB.e))), Symbol=c(rep(100, times=nrow(FB.e))))
samples4plots <- rbind(CI.B.etc, CI.E.etc, PG.B.etc, PG.E.etc, WB.B.etc, WB.E.etc, FB.B.etc, FB.E.etc)
samples4plots$SAMPLE <- as.character(samples4plots$SAMPLE)
samples4plots <- arrange(samples4plots, samples4plots$SAMPLE)
SRM.data4plots <- rbind.data.frame(SRM.data.mean.ordered, Order=samples4plots$Order, Color=samples4plots$Color, Symbol=samples4plots$Symbol)
SRM.data4plots.ordered <- as.matrix(SRM.data4plots[-1, order(SRM.data4plots[which(rownames(SRM.data4plots) == 'Order'), ]) ])
SRM.data4plots.ordered
tail(SRM.data4plots.ordered)
SRM.data4plots <- rbind.data.frame(SRM.data.mean.ordered, Order=samples4plots$Order, Color=samples4plots$Color, Symbol=samples4plots$Symbol)
SRM.data4plots
SRM.data4plots.ordered <- as.matrix(SRM.data4plots[, order(SRM.data4plots[which(rownames(SRM.data4plots) == 'Order'), ]) ])
tail(SRM.data4plots.ordered)
SRM.data4plots
SRM.data4plots
tail(SRM.data4plots)
barplot(SRM.data4plots.ordered[1,], main=SRM.proteins[1,c(1:2)], col=SRM.data4plots.ordered[117,], density=SRM.data4plots.ordered[118,])
