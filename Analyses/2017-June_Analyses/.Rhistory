c("GO:0051595","response to methylglyoxal",0.006,1.5440,0.945,0.000,"response to methylglyoxal"),
c("GO:0098609","cell-cell adhesion",0.030,1.4134,0.948,0.000,"cell-cell adhesion"),
c("GO:0006891","intra-Golgi vesicle-mediated transport",0.009,2.8621,0.819,0.039,"intra-Golgi vesicle-mediated transport"),
c("GO:0000054","ribosomal subunit export from nucleus",0.003,1.5440,0.737,0.542,"intra-Golgi vesicle-mediated transport"),
c("GO:0010971","positive regulation of G2/M transition of mitotic cell cycle",0.001,1.9829,0.814,0.060,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0045769","negative regulation of asymmetric cell division",0.000,1.5440,0.843,0.135,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0021873","forebrain neuroblast division",0.001,1.5440,0.820,0.325,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0003341","cilium movement",0.004,5.2652,0.768,0.065,"cilium movement"),
c("GO:0030317","sperm motility",0.003,3.7570,0.807,0.516,"cilium movement"),
c("GO:0036159","inner dynein arm assembly",0.000,3.1226,0.637,0.559,"cilium movement"),
c("GO:0016575","histone deacetylation",0.010,5.2652,0.596,0.078,"histone deacetylation"),
c("GO:0007010","cytoskeleton organization",0.151,1.9791,0.726,0.589,"histone deacetylation"),
c("GO:0051823","regulation of synapse structural plasticity",0.000,1.5440,0.753,0.277,"histone deacetylation"),
c("GO:1901675","negative regulation of histone H3-K27 acetylation",0.000,1.5440,0.649,0.629,"histone deacetylation"),
c("GO:0010817","regulation of hormone levels",0.030,1.3710,0.908,0.340,"histone deacetylation"),
c("GO:0033962","cytoplasmic mRNA processing body assembly",0.001,1.6142,0.746,0.589,"histone deacetylation"),
c("GO:0034063","stress granule assembly",0.001,1.8393,0.750,0.439,"histone deacetylation"),
c("GO:0010501","RNA secondary structure unwinding",0.000,2.1537,0.854,0.092,"RNA secondary structure unwinding"));
stuff <- data.frame(revigo.data);
names(stuff) <- revigo.names;
stuff$abslog10pvalue <- as.numeric( as.character(stuff$abslog10pvalue) );
stuff$freqInDbPercent <- as.numeric( as.character(stuff$freqInDbPercent) );
stuff$uniqueness <- as.numeric( as.character(stuff$uniqueness) );
stuff$dispensability <- as.numeric( as.character(stuff$dispensability) );
# by default, outputs to a PDF file
# pdf( file="revigo_treemap.pdf", width=16, height=9 ) # width and height are in inches
# check the tmPlot command documentation for all possible parameters - there are a lot more
tmPlot(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = TRUE,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCDC",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
fontcolor.labels = "gray25",
position.legend = "none"
)
#dev.off()
# A treemap R script produced by the REVIGO server at http://revigo.irb.hr/
# If you found REVIGO useful in your work, please cite the following reference:
# Supek F et al. "REVIGO summarizes and visualizes long lists of Gene Ontology
# terms" PLoS ONE 2011. doi:10.1371/journal.pone.0021800
# author: Anton Kratz <anton.kratz@gmail.com>, RIKEN Omics Science Center, Functional Genomics Technology Team, Japan
# created: Fri, Nov 02, 2012  7:25:52 PM
# last change: Fri, Nov 09, 2012  3:20:01 PM
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
# Set the working directory if necessary
# setwd("C:/Users/username/workingdir");
# --------------------------------------------------------------------------
# Here is your data from REVIGO. Scroll down for plot configuration options.
revigo.names <- c("term_ID","description","freqInDbPercent","abslog10pvalue","uniqueness","dispensability","representative");
revigo.data <- rbind(c("GO:0006096","glycolytic process",0.522,6.4498,0.641,0.000,"glycolytic process"),
c("GO:0090611","ubiquitin-independent protein catabolic process via the multivesicular body sorting pathway",0.025,1.5440,0.792,0.318,"glycolytic process"),
c("GO:0097056","selenocysteinyl-tRNA(Sec) biosynthetic process",0.039,2.1587,0.755,0.469,"glycolytic process"),
c("GO:0006002","fructose 6-phosphate metabolic process",0.043,2.5266,0.865,0.292,"glycolytic process"),
c("GO:0046166","glyceraldehyde-3-phosphate biosynthetic process",0.000,3.2132,0.809,0.200,"glycolytic process"),
c("GO:0006108","malate metabolic process",0.093,2.1587,0.762,0.357,"glycolytic process"),
c("GO:0015966","diadenosine tetraphosphate biosynthetic process",0.000,1.5440,0.811,0.220,"glycolytic process"),
c("GO:0006099","tricarboxylic acid cycle",0.483,4.6799,0.690,0.628,"glycolytic process"),
c("GO:0006094","gluconeogenesis",0.274,2.1770,0.809,0.575,"glycolytic process"),
c("GO:0006424","glutamyl-tRNA aminoacylation",0.060,2.9162,0.640,0.345,"glycolytic process"),
c("GO:0006436","tryptophanyl-tRNA aminoacylation",0.049,1.3710,0.644,0.610,"glycolytic process"),
c("GO:0006434","seryl-tRNA aminoacylation",0.045,2.3846,0.645,0.607,"glycolytic process"),
c("GO:0006433","prolyl-tRNA aminoacylation",0.044,1.3710,0.645,0.606,"glycolytic process"),
c("GO:0051595","response to methylglyoxal",0.006,1.5440,0.945,0.000,"response to methylglyoxal"),
c("GO:0098609","cell-cell adhesion",0.030,1.4134,0.948,0.000,"cell-cell adhesion"),
c("GO:0006891","intra-Golgi vesicle-mediated transport",0.009,2.8621,0.819,0.039,"intra-Golgi vesicle-mediated transport"),
c("GO:0000054","ribosomal subunit export from nucleus",0.003,1.5440,0.737,0.542,"intra-Golgi vesicle-mediated transport"),
c("GO:0010971","positive regulation of G2/M transition of mitotic cell cycle",0.001,1.9829,0.814,0.060,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0045769","negative regulation of asymmetric cell division",0.000,1.5440,0.843,0.135,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0021873","forebrain neuroblast division",0.001,1.5440,0.820,0.325,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0003341","cilium movement",0.004,5.2652,0.768,0.065,"cilium movement"),
c("GO:0030317","sperm motility",0.003,3.7570,0.807,0.516,"cilium movement"),
c("GO:0036159","inner dynein arm assembly",0.000,3.1226,0.637,0.559,"cilium movement"),
c("GO:0016575","histone deacetylation",0.010,5.2652,0.596,0.078,"histone deacetylation"),
c("GO:0007010","cytoskeleton organization",0.151,1.9791,0.726,0.589,"histone deacetylation"),
c("GO:0051823","regulation of synapse structural plasticity",0.000,1.5440,0.753,0.277,"histone deacetylation"),
c("GO:1901675","negative regulation of histone H3-K27 acetylation",0.000,1.5440,0.649,0.629,"histone deacetylation"),
c("GO:0010817","regulation of hormone levels",0.030,1.3710,0.908,0.340,"histone deacetylation"),
c("GO:0033962","cytoplasmic mRNA processing body assembly",0.001,1.6142,0.746,0.589,"histone deacetylation"),
c("GO:0034063","stress granule assembly",0.001,1.8393,0.750,0.439,"histone deacetylation"),
c("GO:0010501","RNA secondary structure unwinding",0.000,2.1537,0.854,0.092,"RNA secondary structure unwinding"));
stuff <- data.frame(revigo.data);
names(stuff) <- revigo.names;
stuff$abslog10pvalue <- as.numeric( as.character(stuff$abslog10pvalue) );
stuff$freqInDbPercent <- as.numeric( as.character(stuff$freqInDbPercent) );
stuff$uniqueness <- as.numeric( as.character(stuff$uniqueness) );
stuff$dispensability <- as.numeric( as.character(stuff$dispensability) );
# by default, outputs to a PDF file
# pdf( file="revigo_treemap.pdf", width=16, height=9 ) # width and height are in inches
# check the tmPlot command documentation for all possible parameters - there are a lot more
tmPlot(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = TRUE,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCDC",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
fontcolor.labels = "slategray4",
position.legend = "none"
)
#dev.off()
# A treemap R script produced by the REVIGO server at http://revigo.irb.hr/
# If you found REVIGO useful in your work, please cite the following reference:
# Supek F et al. "REVIGO summarizes and visualizes long lists of Gene Ontology
# terms" PLoS ONE 2011. doi:10.1371/journal.pone.0021800
# author: Anton Kratz <anton.kratz@gmail.com>, RIKEN Omics Science Center, Functional Genomics Technology Team, Japan
# created: Fri, Nov 02, 2012  7:25:52 PM
# last change: Fri, Nov 09, 2012  3:20:01 PM
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
# Set the working directory if necessary
# setwd("C:/Users/username/workingdir");
# --------------------------------------------------------------------------
# Here is your data from REVIGO. Scroll down for plot configuration options.
revigo.names <- c("term_ID","description","freqInDbPercent","abslog10pvalue","uniqueness","dispensability","representative");
revigo.data <- rbind(c("GO:0006096","glycolytic process",0.522,6.4498,0.641,0.000,"glycolytic process"),
c("GO:0090611","ubiquitin-independent protein catabolic process via the multivesicular body sorting pathway",0.025,1.5440,0.792,0.318,"glycolytic process"),
c("GO:0097056","selenocysteinyl-tRNA(Sec) biosynthetic process",0.039,2.1587,0.755,0.469,"glycolytic process"),
c("GO:0006002","fructose 6-phosphate metabolic process",0.043,2.5266,0.865,0.292,"glycolytic process"),
c("GO:0046166","glyceraldehyde-3-phosphate biosynthetic process",0.000,3.2132,0.809,0.200,"glycolytic process"),
c("GO:0006108","malate metabolic process",0.093,2.1587,0.762,0.357,"glycolytic process"),
c("GO:0015966","diadenosine tetraphosphate biosynthetic process",0.000,1.5440,0.811,0.220,"glycolytic process"),
c("GO:0006099","tricarboxylic acid cycle",0.483,4.6799,0.690,0.628,"glycolytic process"),
c("GO:0006094","gluconeogenesis",0.274,2.1770,0.809,0.575,"glycolytic process"),
c("GO:0006424","glutamyl-tRNA aminoacylation",0.060,2.9162,0.640,0.345,"glycolytic process"),
c("GO:0006436","tryptophanyl-tRNA aminoacylation",0.049,1.3710,0.644,0.610,"glycolytic process"),
c("GO:0006434","seryl-tRNA aminoacylation",0.045,2.3846,0.645,0.607,"glycolytic process"),
c("GO:0006433","prolyl-tRNA aminoacylation",0.044,1.3710,0.645,0.606,"glycolytic process"),
c("GO:0051595","response to methylglyoxal",0.006,1.5440,0.945,0.000,"response to methylglyoxal"),
c("GO:0098609","cell-cell adhesion",0.030,1.4134,0.948,0.000,"cell-cell adhesion"),
c("GO:0006891","intra-Golgi vesicle-mediated transport",0.009,2.8621,0.819,0.039,"intra-Golgi vesicle-mediated transport"),
c("GO:0000054","ribosomal subunit export from nucleus",0.003,1.5440,0.737,0.542,"intra-Golgi vesicle-mediated transport"),
c("GO:0010971","positive regulation of G2/M transition of mitotic cell cycle",0.001,1.9829,0.814,0.060,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0045769","negative regulation of asymmetric cell division",0.000,1.5440,0.843,0.135,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0021873","forebrain neuroblast division",0.001,1.5440,0.820,0.325,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0003341","cilium movement",0.004,5.2652,0.768,0.065,"cilium movement"),
c("GO:0030317","sperm motility",0.003,3.7570,0.807,0.516,"cilium movement"),
c("GO:0036159","inner dynein arm assembly",0.000,3.1226,0.637,0.559,"cilium movement"),
c("GO:0016575","histone deacetylation",0.010,5.2652,0.596,0.078,"histone deacetylation"),
c("GO:0007010","cytoskeleton organization",0.151,1.9791,0.726,0.589,"histone deacetylation"),
c("GO:0051823","regulation of synapse structural plasticity",0.000,1.5440,0.753,0.277,"histone deacetylation"),
c("GO:1901675","negative regulation of histone H3-K27 acetylation",0.000,1.5440,0.649,0.629,"histone deacetylation"),
c("GO:0010817","regulation of hormone levels",0.030,1.3710,0.908,0.340,"histone deacetylation"),
c("GO:0033962","cytoplasmic mRNA processing body assembly",0.001,1.6142,0.746,0.589,"histone deacetylation"),
c("GO:0034063","stress granule assembly",0.001,1.8393,0.750,0.439,"histone deacetylation"),
c("GO:0010501","RNA secondary structure unwinding",0.000,2.1537,0.854,0.092,"RNA secondary structure unwinding"));
stuff <- data.frame(revigo.data);
names(stuff) <- revigo.names;
stuff$abslog10pvalue <- as.numeric( as.character(stuff$abslog10pvalue) );
stuff$freqInDbPercent <- as.numeric( as.character(stuff$freqInDbPercent) );
stuff$uniqueness <- as.numeric( as.character(stuff$uniqueness) );
stuff$dispensability <- as.numeric( as.character(stuff$dispensability) );
# by default, outputs to a PDF file
# pdf( file="revigo_treemap.pdf", width=16, height=9 ) # width and height are in inches
# check the tmPlot command documentation for all possible parameters - there are a lot more
tmPlot(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = TRUE,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCDC",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
fontcolor.labels = "slategray4",
position.legend = "none"
)
#dev.off()
# A treemap R script produced by the REVIGO server at http://revigo.irb.hr/
# If you found REVIGO useful in your work, please cite the following reference:
# Supek F et al. "REVIGO summarizes and visualizes long lists of Gene Ontology
# terms" PLoS ONE 2011. doi:10.1371/journal.pone.0021800
# author: Anton Kratz <anton.kratz@gmail.com>, RIKEN Omics Science Center, Functional Genomics Technology Team, Japan
# created: Fri, Nov 02, 2012  7:25:52 PM
# last change: Fri, Nov 09, 2012  3:20:01 PM
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
# Set the working directory if necessary
# setwd("C:/Users/username/workingdir");
# --------------------------------------------------------------------------
# Here is your data from REVIGO. Scroll down for plot configuration options.
revigo.names <- c("term_ID","description","freqInDbPercent","abslog10pvalue","uniqueness","dispensability","representative");
revigo.data <- rbind(c("GO:0006096","glycolytic process",0.522,6.4498,0.641,0.000,"glycolytic process"),
c("GO:0090611","ubiquitin-independent protein catabolic process via the multivesicular body sorting pathway",0.025,1.5440,0.792,0.318,"glycolytic process"),
c("GO:0097056","selenocysteinyl-tRNA(Sec) biosynthetic process",0.039,2.1587,0.755,0.469,"glycolytic process"),
c("GO:0006002","fructose 6-phosphate metabolic process",0.043,2.5266,0.865,0.292,"glycolytic process"),
c("GO:0046166","glyceraldehyde-3-phosphate biosynthetic process",0.000,3.2132,0.809,0.200,"glycolytic process"),
c("GO:0006108","malate metabolic process",0.093,2.1587,0.762,0.357,"glycolytic process"),
c("GO:0015966","diadenosine tetraphosphate biosynthetic process",0.000,1.5440,0.811,0.220,"glycolytic process"),
c("GO:0006099","tricarboxylic acid cycle",0.483,4.6799,0.690,0.628,"glycolytic process"),
c("GO:0006094","gluconeogenesis",0.274,2.1770,0.809,0.575,"glycolytic process"),
c("GO:0006424","glutamyl-tRNA aminoacylation",0.060,2.9162,0.640,0.345,"glycolytic process"),
c("GO:0006436","tryptophanyl-tRNA aminoacylation",0.049,1.3710,0.644,0.610,"glycolytic process"),
c("GO:0006434","seryl-tRNA aminoacylation",0.045,2.3846,0.645,0.607,"glycolytic process"),
c("GO:0006433","prolyl-tRNA aminoacylation",0.044,1.3710,0.645,0.606,"glycolytic process"),
c("GO:0051595","response to methylglyoxal",0.006,1.5440,0.945,0.000,"response to methylglyoxal"),
c("GO:0098609","cell-cell adhesion",0.030,1.4134,0.948,0.000,"cell-cell adhesion"),
c("GO:0006891","intra-Golgi vesicle-mediated transport",0.009,2.8621,0.819,0.039,"intra-Golgi vesicle-mediated transport"),
c("GO:0000054","ribosomal subunit export from nucleus",0.003,1.5440,0.737,0.542,"intra-Golgi vesicle-mediated transport"),
c("GO:0010971","positive regulation of G2/M transition of mitotic cell cycle",0.001,1.9829,0.814,0.060,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0045769","negative regulation of asymmetric cell division",0.000,1.5440,0.843,0.135,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0021873","forebrain neuroblast division",0.001,1.5440,0.820,0.325,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0003341","cilium movement",0.004,5.2652,0.768,0.065,"cilium movement"),
c("GO:0030317","sperm motility",0.003,3.7570,0.807,0.516,"cilium movement"),
c("GO:0036159","inner dynein arm assembly",0.000,3.1226,0.637,0.559,"cilium movement"),
c("GO:0016575","histone deacetylation",0.010,5.2652,0.596,0.078,"histone deacetylation"),
c("GO:0007010","cytoskeleton organization",0.151,1.9791,0.726,0.589,"histone deacetylation"),
c("GO:0051823","regulation of synapse structural plasticity",0.000,1.5440,0.753,0.277,"histone deacetylation"),
c("GO:1901675","negative regulation of histone H3-K27 acetylation",0.000,1.5440,0.649,0.629,"histone deacetylation"),
c("GO:0010817","regulation of hormone levels",0.030,1.3710,0.908,0.340,"histone deacetylation"),
c("GO:0033962","cytoplasmic mRNA processing body assembly",0.001,1.6142,0.746,0.589,"histone deacetylation"),
c("GO:0034063","stress granule assembly",0.001,1.8393,0.750,0.439,"histone deacetylation"),
c("GO:0010501","RNA secondary structure unwinding",0.000,2.1537,0.854,0.092,"RNA secondary structure unwinding"));
stuff <- data.frame(revigo.data);
names(stuff) <- revigo.names;
stuff$abslog10pvalue <- as.numeric( as.character(stuff$abslog10pvalue) );
stuff$freqInDbPercent <- as.numeric( as.character(stuff$freqInDbPercent) );
stuff$uniqueness <- as.numeric( as.character(stuff$uniqueness) );
stuff$dispensability <- as.numeric( as.character(stuff$dispensability) );
# by default, outputs to a PDF file
# pdf( file="revigo_treemap.pdf", width=16, height=9 ) # width and height are in inches
# check the tmPlot command documentation for all possible parameters - there are a lot more
tmPlot(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = TRUE,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCDC",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
fontcolor.labels = "slategray",
position.legend = "none"
)
#dev.off()
# A treemap R script produced by the REVIGO server at http://revigo.irb.hr/
# If you found REVIGO useful in your work, please cite the following reference:
# Supek F et al. "REVIGO summarizes and visualizes long lists of Gene Ontology
# terms" PLoS ONE 2011. doi:10.1371/journal.pone.0021800
# author: Anton Kratz <anton.kratz@gmail.com>, RIKEN Omics Science Center, Functional Genomics Technology Team, Japan
# created: Fri, Nov 02, 2012  7:25:52 PM
# last change: Fri, Nov 09, 2012  3:20:01 PM
# -----------------------------------------------------------------------------
# If you don't have the treemap package installed, uncomment the following line:
# install.packages( "treemap" );
library(treemap) 								# treemap package by Martijn Tennekes
# Set the working directory if necessary
# setwd("C:/Users/username/workingdir");
# --------------------------------------------------------------------------
# Here is your data from REVIGO. Scroll down for plot configuration options.
revigo.names <- c("term_ID","description","freqInDbPercent","abslog10pvalue","uniqueness","dispensability","representative");
revigo.data <- rbind(c("GO:0006096","glycolytic process",0.522,6.4498,0.641,0.000,"glycolytic process"),
c("GO:0090611","ubiquitin-independent protein catabolic process via the multivesicular body sorting pathway",0.025,1.5440,0.792,0.318,"glycolytic process"),
c("GO:0097056","selenocysteinyl-tRNA(Sec) biosynthetic process",0.039,2.1587,0.755,0.469,"glycolytic process"),
c("GO:0006002","fructose 6-phosphate metabolic process",0.043,2.5266,0.865,0.292,"glycolytic process"),
c("GO:0046166","glyceraldehyde-3-phosphate biosynthetic process",0.000,3.2132,0.809,0.200,"glycolytic process"),
c("GO:0006108","malate metabolic process",0.093,2.1587,0.762,0.357,"glycolytic process"),
c("GO:0015966","diadenosine tetraphosphate biosynthetic process",0.000,1.5440,0.811,0.220,"glycolytic process"),
c("GO:0006099","tricarboxylic acid cycle",0.483,4.6799,0.690,0.628,"glycolytic process"),
c("GO:0006094","gluconeogenesis",0.274,2.1770,0.809,0.575,"glycolytic process"),
c("GO:0006424","glutamyl-tRNA aminoacylation",0.060,2.9162,0.640,0.345,"glycolytic process"),
c("GO:0006436","tryptophanyl-tRNA aminoacylation",0.049,1.3710,0.644,0.610,"glycolytic process"),
c("GO:0006434","seryl-tRNA aminoacylation",0.045,2.3846,0.645,0.607,"glycolytic process"),
c("GO:0006433","prolyl-tRNA aminoacylation",0.044,1.3710,0.645,0.606,"glycolytic process"),
c("GO:0051595","response to methylglyoxal",0.006,1.5440,0.945,0.000,"response to methylglyoxal"),
c("GO:0098609","cell-cell adhesion",0.030,1.4134,0.948,0.000,"cell-cell adhesion"),
c("GO:0006891","intra-Golgi vesicle-mediated transport",0.009,2.8621,0.819,0.039,"intra-Golgi vesicle-mediated transport"),
c("GO:0000054","ribosomal subunit export from nucleus",0.003,1.5440,0.737,0.542,"intra-Golgi vesicle-mediated transport"),
c("GO:0010971","positive regulation of G2/M transition of mitotic cell cycle",0.001,1.9829,0.814,0.060,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0045769","negative regulation of asymmetric cell division",0.000,1.5440,0.843,0.135,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0021873","forebrain neuroblast division",0.001,1.5440,0.820,0.325,"positive regulation of G2/M transition of mitotic cell cycle"),
c("GO:0003341","cilium movement",0.004,5.2652,0.768,0.065,"cilium movement"),
c("GO:0030317","sperm motility",0.003,3.7570,0.807,0.516,"cilium movement"),
c("GO:0036159","inner dynein arm assembly",0.000,3.1226,0.637,0.559,"cilium movement"),
c("GO:0016575","histone deacetylation",0.010,5.2652,0.596,0.078,"histone deacetylation"),
c("GO:0007010","cytoskeleton organization",0.151,1.9791,0.726,0.589,"histone deacetylation"),
c("GO:0051823","regulation of synapse structural plasticity",0.000,1.5440,0.753,0.277,"histone deacetylation"),
c("GO:1901675","negative regulation of histone H3-K27 acetylation",0.000,1.5440,0.649,0.629,"histone deacetylation"),
c("GO:0010817","regulation of hormone levels",0.030,1.3710,0.908,0.340,"histone deacetylation"),
c("GO:0033962","cytoplasmic mRNA processing body assembly",0.001,1.6142,0.746,0.589,"histone deacetylation"),
c("GO:0034063","stress granule assembly",0.001,1.8393,0.750,0.439,"histone deacetylation"),
c("GO:0010501","RNA secondary structure unwinding",0.000,2.1537,0.854,0.092,"RNA secondary structure unwinding"));
stuff <- data.frame(revigo.data);
names(stuff) <- revigo.names;
stuff$abslog10pvalue <- as.numeric( as.character(stuff$abslog10pvalue) );
stuff$freqInDbPercent <- as.numeric( as.character(stuff$freqInDbPercent) );
stuff$uniqueness <- as.numeric( as.character(stuff$uniqueness) );
stuff$dispensability <- as.numeric( as.character(stuff$dispensability) );
# by default, outputs to a PDF file
# pdf( file="revigo_treemap.pdf", width=16, height=9 ) # width and height are in inches
# check the tmPlot command documentation for all possible parameters - there are a lot more
tmPlot(
stuff,
index = c("representative","description"),
vSize = "abslog10pvalue",
type = "categorical",
vColor = "representative",
title = "REVIGO Gene Ontology treemap",
inflate.labels = TRUE,      # set this to TRUE for space-filling group labels - good for posters
lowerbound.cex.labels = 0,   # try to draw as many labels as possible (still, some small squares may not get a label)
bg.labels = "#CCCCCCDC",     # define background color of group labels
# "#CCCCCC00" is fully transparent, "#CCCCCCAA" is semi-transparent grey, NA is opaque
fontcolor.labels = "gray36",
position.legend = "none"
)
#dev.off()
GeoduckOA <- read.csv(file="https://raw.githubusercontent.com/RobertsLab/project-geoduck-oa/master/data/PugetSound-2016-samples.csv")
head(GeoduckOA)
nsites <- unique(GeoduckOA$Site)
nsites
nsamples <- unique(GeoduckOA$PRVial)
length(nsamples)
Round1 <- GeoduckOA[c(GeoduckOA$Round==1),]
head(Round1)
Round2 <- GeoduckOA[c(GeoduckOA$Round==2),]
head(Round2)
### Import Dataset ###
### Note: this dataset has already been massaged in Excel: sum area by protein, normalized by TIC, all n/a's removed (replaced with zeros), and columns renamed
setwd("~/Documents/Roberts Lab/Geoduck-DNR/Analyses/2017-June_Analyses")
NormProtArea <- read.csv("2017-06-02_SKYLINE-Total-Protein-Area-NORM.csv", header=TRUE, na.strings = "0") # import local file
head(NormProtArea)
View(NormProtArea)
### SUM TRANSITION AREA BY PROTEIN ###
# The "Area" values (which have already been normalized by TIC) are peak area for each transition. Sum them to determine total area for each protein
NormProtAreaAgg <- aggregate(cbind(FB.E.1, CI.E.1, PG.B.1, SK.E.1, FB.B.1, WB.B.1, SK.B.1, CI.B.1, PG.E.1, WB.B.2, PG.E.2, FB.E.2, FB.B.2, CI.B.2, SK.E.2, PG.B.2, SK.B.2, CI.E.2) ~ Protein.Name, FUN = sum, data = NormProtArea, na.rm = TRUE, na.action = NULL)
head(NormProtAreaAgg) #confirming that proteins are now summed
View(NormProtAreaAgg)
#### AVERAGE REPLICATES ####
# FYI No eelgrass sample for Willapa Bay
bareCaseInlet <- ave(NormProtAreaAgg$CI.B.1, NormProtAreaAgg$CI.B.2) # create vector for each site/treatment that averages the replicates (of which there are 2)
bareFidalgoBay <- ave(NormProtAreaAgg$FB.B.1, NormProtAreaAgg$FB.B.2)
bareWillapaBay <- ave(NormProtAreaAgg$WB.B.1, NormProtAreaAgg$WB.B.2)
bareSkokomishRiver <- ave(NormProtAreaAgg$SK.B.1, NormProtAreaAgg$SK.B.2)
barePortGamble <- ave(NormProtAreaAgg$PG.B.1, NormProtAreaAgg$PG.B.2)
eelgrassCaseInlet <- ave(NormProtAreaAgg$CI.E.1, NormProtAreaAgg$CI.E.2)
eelgrassFidalgoBay <- ave(NormProtAreaAgg$FB.E.1, NormProtAreaAgg$FB.E.2)
eelgrassSkokomishRiver <- ave(NormProtAreaAgg$SK.E.1, NormProtAreaAgg$SK.E.2)
eelgrassPortGamble <- ave(NormProtAreaAgg$PG.E.1, NormProtAreaAgg$PG.E.2)
NormProtAreaAggAveraged <- data.frame(NormProtAreaAgg$Protein.Name, bareCaseInlet, bareFidalgoBay, barePortGamble, bareSkokomishRiver, bareWillapaBay, eelgrassCaseInlet, eelgrassFidalgoBay, eelgrassPortGamble, eelgrassSkokomishRiver) # combine site/treatment vectors into new dataframe
head(NormProtAreaAggAveraged)
View(NormProtAreaAggAveraged)
### EDITING GEOID NAME TO MATCH ANNOTATED FILE ###
NormProtAreaAggAveragedGeoID <- NormProtAreaAggAveraged # copy database, create new one to be used to join to annotated file
GeoID.a <- (gsub("cds.", "", NormProtAreaAggAveragedGeoID$NormProtAreaAgg.Protein.Name, fixed=TRUE)) # remove cds. from protein ID
GeoID.b <- (gsub("\\|m.*", "", GeoID.a)) # remove |m.#### from protein ID
noquote(GeoID.b) # remove quotes from resulting protein ID
NormProtAreaAggAveragedGeoID[1] <- GeoID.b # replace the newly created vector of protein ID's in the full database
head(NormProtAreaAggAveragedGeoID) # confirm changes
nrow(NormProtAreaAggAveragedGeoID) # confirm # rows still same
write.table(NormProtAreaAggAveragedGeoID, "2017-06-30_All-Proteins.tab", quote=F, row.names = F, sep="\t") # Save to file
View(NormProtAreaAggAveragedGeoID)
### UPLOAD ANNOTATED GEODUCK PROTEOME FROM URL ###
GeoduckAnnotations <- read.table(
"https://raw.githubusercontent.com/sr320/paper-pano-go/master/data-results/Geo-v3-join-uniprot-all0916-condensed.tab",
sep="\t", header=TRUE, fill=TRUE, stringsAsFactors = FALSE, quote="") #fill=TRUE for empty spaces
nrow(GeoduckAnnotations) # check that the # rows matches the source (I know this from uploading to Galaxy; not sure how else to do it)
ncol(GeoduckAnnotations) # check that the # columns matches the source
head(GeoduckAnnotations) # inspect; although it's easier to "view" in RStudio
View(GeoduckAnnotations)
# MERGE ANNOTATIONS WITH ALL MY PROTEINS ###
AnnotatedProteins <- merge(x = NormProtAreaAggAveragedGeoID, y = GeoduckAnnotations, by.x="NormProtAreaAgg.Protein.Name", by.y="GeoID")
head(AnnotatedProteins) #confirm merge
nrow(AnnotatedProteins) #count number of proteins that were matched with the list of annotations
write.table(AnnotatedProteins, "2017-06-30_All-Annotated-Proteins.tab", quote=F, row.names = F, sep="\t") #write out .tab file
View(AnnotatedProteins)
#### CREATE NMDS PLOT ####
#Load the source file for the biostats package
source("biostats.R") #Either load the source R script or copy paste. Must run this code before NMDS.
library(vegan)
#Make sure first column of protein names is recognized as row names instead of values - this takes the first column containin protein names, and assigns it to the row "header" names
area.protID2 <- NormProtAreaAggAveraged[-1]
rownames(area.protID2) <- NormProtAreaAggAveraged[,1]
head(area.protID2)
write.csv(area.protID2, file="2017-06-30_NormProtAreaAgg&Ave.csv")
#Transpose the file so that rows and columns are switched and normalized by log(x+1)
nrow(NormProtAreaAggAveraged)
ncol(NormProtAreaAggAveraged)
area2.t <- t(area.protID2[,1:9])
area2.tra1 <- (area2.t+1)
area2.tra2 <- data.trans(area2.tra1, method = 'log', plot = FALSE)
ncol(area2.tra2)
nrow(area2.tra2)
#Make MDS dissimilarity matrix
proc.nmds <- metaMDS(area2.t, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE)
#Make figure
fig.nmds <- ordiplot(proc.nmds, choices=c(1,2), type='none', display='sites', xlab='Axis 1', ylab='Axis 2', cex=1)
#bare=circle
#eelgrass=triangle
#case=red
#fidalgo=blue
#willapa=black
#skokomish=green
#gamble=magenta
points(fig.nmds, 'sites', col=c('red', 'blue', 'black', 'green', 'magenta','red', 'blue', 'black', 'green', 'magenta'), pch=c(rep(16,5), rep(17,5)))
legend(0.185,0.1, pch=c(rep(16,5), 1, 2), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('red', 'blue', 'black', 'green', 'magenta', 'black', 'black'))
#### FULL HEATMAP ####
#Install package
install.packages("pheatmap")
library(pheatmap)
#Data should be log(x) or log(x+1) transformed for this analysis, so I'll use my area2.tra dataset.
#Create heatmap
pheatmap(area2.tra2, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
View(area2.tra2)
View(NormProtArea)
View(NormProtAreaAggAveragedGeoID)
View(area2.t)
area2.tra1b <- (1/area2.t)
View(area2.tra1b)
View(area2.tra1b)
area2.tra1-inv <- (1/area2.t)
area2.tra1.inv <- (1/area2.t)
area2.tra2.inv <- data.trans(area2.tra1.inv, method = 'log', plot = FALSE, na.strings="inf")
View(area2.tra2.inv)
ncol(area2.tra2.inv)
nrow(area2.tra2.inv)
ncol(area2.tra2)
nrow(area2.tra2)
proc.nmds.inv <- metaMDS(area2.tra1.inv, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE)
area2.tra1.inv <- (1/area2.t)
area2.tra2.inv <- data.trans(area2.tra1.inv, method = 'log', plot = FALSE, na.strings="inf")
ncol(area2.tra2.inv)
nrow(area2.tra2.inv)
proc.nmds.inv <- metaMDS(area2.tra1.inv, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE)
proc.nmds.inv <- metaMDS(area2.tra1.inv, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE, NA="Inf")
proc.nmds.inv <- metaMDS(area2.tra1.inv, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE, NA=="Inf")
?metaMDS
area2.tra1.inv <- (1/area2.t, na.rm=TRUE)
area2.tra1.inv <- (1/area2.t na.rm=TRUE)
area2.tra2.inv <- data.trans(area2.tra1.inv, method = 'log', plot = FALSE, NA="Inf")
is.na(area2.tra1.inv) <- sapply(area2.tra1.inv, is.infinite)
area2.tra2.inv <- data.trans(area2.tra1.inv, method = 'log', plot = FALSE)
ncol(area2.tra2.inv)
nrow(area2.tra2.inv)
View(area2.tra2.inv)
proc.nmds.inv <- metaMDS(area2.tra1.inv, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE)
View(area2.tra1.inv)
proc.nmds.inv <- metaMDS(area2.tra1.inv, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE)
View(area2.tra1.inv)
library(pheatmap)
pheatmap(area2.tra2.inv, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
#Export preliminary heatmap as a .png
png(filename = "2017-07-04_Heatmap-by-median.png")
pheatmap(area2.tra2, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
dev.off()
#Make sure first column of protein names is recognized as row names instead of values - this takes the first column containin protein names, and assigns it to the row "header" names
area.protID <- NormProtAreaAggAveraged[-1]
rownames(area.protID) <- NormProtAreaAggAveraged[,1]
head(area.protID)
write.csv(area.protID, file="2017-07-04_NormProtAreaAgg&Ave.csv") #write this file out for safe keeping
#Transpose the file so that rows and columns are switched
area.protID.t <- t(area.protID[,1:9])
nrow(NormProtAreaAggAveraged) # Compare row and column lengths before and after transposing
ncol(NormProtAreaAggAveraged)
nrow(area.protID.t)
ncol(area.protID.t)
View(area.protID)
View(area.protID.t)
#Make MDS dissimilarity matrix
proc.nmds <- metaMDS(area.protID.t, distance = 'bray', k = 2, trymax = 100, autotransform = FALSE)
#Make figure
fig.nmds <- ordiplot(proc.nmds, choices=c(1,2), type='none', display='sites', xlab='Axis 1', ylab='Axis 2', cex=1)
#bare=circle
#eelgrass=triangle
#case=red
#fidalgo=blue
#willapa=black
#skokomish=green
#gamble=magenta
points(fig.nmds, 'sites', col=c('red', 'blue', 'black', 'green', 'magenta','red', 'blue', 'black', 'green', 'magenta'), pch=c(rep(16,5), rep(17,5)))
legend(0.185,0.1, pch=c(rep(16,5), 1, 2), legend=c('Case Inlet', "Fidalgo Bay", "Willapa Bay", "Skokomish", "Port Gamble", "Bare", "Eelgrass"), col=c('red', 'blue', 'black', 'green', 'magenta', 'black', 'black'))
#Data should be log(x) or log(x+1) transformed for this analysis. I invert my data (since I had normalized by TIC so values were <1), then log transform.
#Invert data then log transformation for heat map
area.protID.t.inv <- (1/area.protID.t)
is.na(area.protID.t.inv) <- sapply(area.protID.t.inv, is.infinite) # change "Inf" to "NA"
area.protID.t.inv.log <- data.trans(area.protID.t.inv, method = 'log', plot = FALSE)
ncol(area.protID.t.inv.log)
nrow(area.protID.t.inv.log)
#Create heatmap
pheatmap(area.protID.t.inv.log, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
#Export preliminary heatmap as a .png
png(filename = "2017-07-04_Heatmap-by-median.png")
pheatmap(area2.tra2, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
dev.off()
View(area.protID.t.inv.log)
#Export preliminary heatmap as a .png
png(filename = "2017-07-04_Heatmap-by-median.png")
pheatmap(area2.tra2, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
dev.off()
#Export preliminary heatmap as a .png
png(filename = "2017-07-04_Heatmap-by-median.png")
pheatmap(area.protID.t.inv.log, cluster_rows = T, cluster_cols = T, clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean', clustering_method = 'median', show_rownames = T, show_colnames = F)
dev.off()
